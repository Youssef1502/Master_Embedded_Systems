
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000430  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000560  08000568  00010568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000560  08000560  00010568  2**0
                  CONTENTS
  4 .ARM          00000000  08000560  08000560  00010568  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000560  08000568  00010568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000564  08000564  00010564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000568  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000568  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000192a  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000427  00000000  00000000  00011ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  000122e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000127f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b0a  00000000  00000000  00012888  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000cc7  00000000  00000000  00014392  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007672  00000000  00000000  00015059  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c6cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001c748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000548 	.word	0x08000548

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000548 	.word	0x08000548

08000170 <Get_CRLH_Position>:
==================================================**/

#include "STM32_F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d046      	beq.n	800020e <Get_CRLH_Position+0x9e>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d03a      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d032      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d032      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d02c      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000198:	e04b      	b.n	8000232 <Get_CRLH_Position+0xc2>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d033      	beq.n	8000206 <Get_CRLH_Position+0x96>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d033      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d02d      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a6:	e044      	b.n	8000232 <Get_CRLH_Position+0xc2>
 80001a8:	f640 0201 	movw	r2, #2049	; 0x801
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d036      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001b0:	f640 0201 	movw	r2, #2049	; 0x801
 80001b4:	4293      	cmp	r3, r2
 80001b6:	dc0b      	bgt.n	80001d0 <Get_CRLH_Position+0x60>
 80001b8:	f240 2201 	movw	r2, #513	; 0x201
 80001bc:	4293      	cmp	r3, r2
 80001be:	d02a      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001c0:	f240 4201 	movw	r2, #1025	; 0x401
 80001c4:	4293      	cmp	r3, r2
 80001c6:	d028      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001cc:	d021      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001ce:	e030      	b.n	8000232 <Get_CRLH_Position+0xc2>
 80001d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d4:	d027      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001da:	dc03      	bgt.n	80001e4 <Get_CRLH_Position+0x74>
 80001dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	e026      	b.n	8000232 <Get_CRLH_Position+0xc2>
 80001e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e8:	d01f      	beq.n	800022a <Get_CRLH_Position+0xba>
 80001ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001ee:	d01e      	beq.n	800022e <Get_CRLH_Position+0xbe>
 80001f0:	e01f      	b.n	8000232 <Get_CRLH_Position+0xc2>
	{
	case GPIO_PIN_0 :
		return 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	e01e      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_1 :
		return 4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	e01c      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_2 :
		return 8;
 80001fa:	2308      	movs	r3, #8
 80001fc:	e01a      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_3 :
		return 12;
 80001fe:	230c      	movs	r3, #12
 8000200:	e018      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000202:	2310      	movs	r3, #16
 8000204:	e016      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_5 :
		return 20;
 8000206:	2314      	movs	r3, #20
 8000208:	e014      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_6 :
		return 24;
 800020a:	2318      	movs	r3, #24
 800020c:	e012      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_7 :
		return 28;
 800020e:	231c      	movs	r3, #28
 8000210:	e010      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_8 :
		return 0;
 8000212:	2300      	movs	r3, #0
 8000214:	e00e      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_9 :
		return 4;
 8000216:	2304      	movs	r3, #4
 8000218:	e00c      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_10 :
		return 8;
 800021a:	2308      	movs	r3, #8
 800021c:	e00a      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_11 :
		return 12;
 800021e:	230c      	movs	r3, #12
 8000220:	e008      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000222:	2310      	movs	r3, #16
 8000224:	e006      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_13 :
		return 20;
 8000226:	2314      	movs	r3, #20
 8000228:	e004      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_14 :
		return 24;
 800022a:	2318      	movs	r3, #24
 800022c:	e002      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;

	case GPIO_PIN_15 :
		return 28;
 800022e:	231c      	movs	r3, #28
 8000230:	e000      	b.n	8000234 <Get_CRLH_Position+0xc4>
		break;
	}
	return 0;
 8000232:	2300      	movs	r3, #0
}
 8000234:	4618      	mov	r0, r3
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr

0800023e <MCAL_GPIO_Init>:
 * Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 *                    But LQFP48 Package has Only GPIO A,B, Part of C/D Exported as External Pins from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 800023e:	b590      	push	{r4, r7, lr}
 8000240:	b085      	sub	sp, #20
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
 8000246:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) Configure Pins from 0 >> 7
	// Port configuration register low (GPIOx_CRL) Configure Pins from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 8000248:	2300      	movs	r3, #0
 800024a:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	2bff      	cmp	r3, #255	; 0xff
 8000256:	d801      	bhi.n	800025c <MCAL_GPIO_Init+0x1e>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	e001      	b.n	8000260 <MCAL_GPIO_Init+0x22>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3304      	adds	r3, #4
 8000260:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] , Mode[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	881b      	ldrh	r3, [r3, #0]
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ff82 	bl	8000170 <Get_CRLH_Position>
 800026c:	4603      	mov	r3, r0
 800026e:	461a      	mov	r2, r3
 8000270:	230f      	movs	r3, #15
 8000272:	4093      	lsls	r3, r2
 8000274:	43da      	mvns	r2, r3
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	401a      	ands	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	601a      	str	r2, [r3, #0]

	// if pin is Output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	789b      	ldrb	r3, [r3, #2]
 8000284:	2b07      	cmp	r3, #7
 8000286:	d00b      	beq.n	80002a0 <MCAL_GPIO_Init+0x62>
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	789b      	ldrb	r3, [r3, #2]
 800028c:	2b06      	cmp	r3, #6
 800028e:	d007      	beq.n	80002a0 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000294:	2b05      	cmp	r3, #5
 8000296:	d003      	beq.n	80002a0 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	2b04      	cmp	r3, #4
 800029e:	d111      	bne.n	80002c4 <MCAL_GPIO_Init+0x86>
	{
		// Set CNF[1:0] , Mode[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) || (PinConfig->GPIO_Output_Speed)) & 0x0f );
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	789b      	ldrb	r3, [r3, #2]
 80002a4:	3b04      	subs	r3, #4
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d103      	bne.n	80002b4 <MCAL_GPIO_Init+0x76>
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	78db      	ldrb	r3, [r3, #3]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MCAL_GPIO_Init+0x7a>
 80002b4:	2301      	movs	r3, #1
 80002b6:	e000      	b.n	80002ba <MCAL_GPIO_Init+0x7c>
 80002b8:	2300      	movs	r3, #0
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 030f 	and.w	r3, r3, #15
 80002c0:	73fb      	strb	r3, [r7, #15]
 80002c2:	e02e      	b.n	8000322 <MCAL_GPIO_Init+0xe4>
	}

	// if pin is Input
	else // MODE = 00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	789b      	ldrb	r3, [r3, #2]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d003      	beq.n	80002d4 <MCAL_GPIO_Init+0x96>
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	789b      	ldrb	r3, [r3, #2]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d109      	bne.n	80002e8 <MCAL_GPIO_Init+0xaa>
		{
			// Set CNF[1:0] , Mode[1:0]=00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) || 0x0) & 0x0f );
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	789b      	ldrb	r3, [r3, #2]
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	2b00      	cmp	r3, #0
 80002dc:	bf14      	ite	ne
 80002de:	2301      	movne	r3, #1
 80002e0:	2300      	moveq	r3, #0
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	73fb      	strb	r3, [r7, #15]
 80002e6:	e01c      	b.n	8000322 <MCAL_GPIO_Init+0xe4>
		}

		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Consider it as Input Floating
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	789b      	ldrb	r3, [r3, #2]
 80002ec:	2b08      	cmp	r3, #8
 80002ee:	d102      	bne.n	80002f6 <MCAL_GPIO_Init+0xb8>
		{
			// Set CNF[1:0] , Mode[1:0]=00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) || 0x0) & 0x0f );
 80002f0:	2301      	movs	r3, #1
 80002f2:	73fb      	strb	r3, [r7, #15]
 80002f4:	e015      	b.n	8000322 <MCAL_GPIO_Init+0xe4>
		}

		else //PU  PD  Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) || 0x0) & 0x0f );
 80002f6:	2301      	movs	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	789b      	ldrb	r3, [r3, #2]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d107      	bne.n	8000312 <MCAL_GPIO_Init+0xd4>
			{
				// PxODR = 1  Input Pull-up : table 20, port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;   // (1 << )
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	8812      	ldrh	r2, [r2, #0]
 800030a:	431a      	orrs	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	e007      	b.n	8000322 <MCAL_GPIO_Init+0xe4>
			}
			else
			{
				// PxODR = 0  Input Pull-down : table 20, port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	8812      	ldrh	r2, [r2, #0]
 800031a:	43d2      	mvns	r2, r2
 800031c:	401a      	ands	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	60da      	str	r2, [r3, #12]



	}
	// Write on CRL or CRH
	(*ConfigRegister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000322:	7bfc      	ldrb	r4, [r7, #15]
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff21 	bl	8000170 <Get_CRLH_Position>
 800032e:	4603      	mov	r3, r0
 8000330:	fa04 f203 	lsl.w	r2, r4, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	431a      	orrs	r2, r3
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	bd90      	pop	{r4, r7, pc}

08000346 <MCAL_GPIO_ReadPin>:
 * @retval 			-the Input Pin Value (two Values Based on) @ref GPIO_PIN_state
 * Note				-None
 * */

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{
 8000346:	b480      	push	{r7}
 8000348:	b085      	sub	sp, #20
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	460b      	mov	r3, r1
 8000350:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;

	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	887b      	ldrh	r3, [r7, #2]
 8000358:	4013      	ands	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	d002      	beq.n	8000364 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET;
 800035e:	2301      	movs	r3, #1
 8000360:	73fb      	strb	r3, [r7, #15]
 8000362:	e001      	b.n	8000368 <MCAL_GPIO_ReadPin+0x22>
	}

	else
	{
		bitstatus = GPIO_PIN_RESET;
 8000364:	2300      	movs	r3, #0
 8000366:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8000368:	7bfb      	ldrb	r3, [r7, #15]
}
 800036a:	4618      	mov	r0, r3
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <MCAL_GPIO_TogglePin>:
 * @retval 			-None
 * Note				-None
 * */

void MCAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	68da      	ldr	r2, [r3, #12]
 8000384:	887b      	ldrh	r3, [r7, #2]
 8000386:	405a      	eors	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	60da      	str	r2, [r3, #12]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
	...

08000398 <Clock_Init>:
#include "STM32F103x6.h"
#include "STM32_F103C6_GPIO_Drivers.h"


void Clock_Init ()
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	// Enable Clock GPIOA
	RCC_GPIOA_CLK_EN() ;
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <Clock_Init+0x24>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a06      	ldr	r2, [pc, #24]	; (80003bc <Clock_Init+0x24>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]

	// Enable Clock GPIOB
	RCC_GPIOB_CLK_EN() ;
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <Clock_Init+0x24>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a03      	ldr	r2, [pc, #12]	; (80003bc <Clock_Init+0x24>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]

}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <GPIO_Init>:

void GPIO_Init()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

	// PA1 AS [ INPUT Floating ]


	// PA13 AS [ INPUT Floating ]
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80003c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ca:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003cc:	2301      	movs	r3, #1
 80003ce:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA , &PinCfg);
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	480e      	ldr	r0, [pc, #56]	; (8000410 <GPIO_Init+0x50>)
 80003d6:	f7ff ff32 	bl	800023e <MCAL_GPIO_Init>


	// ================== Output Configuration ================== //

	// PB1 AS OUTPUT [ PUSH PULL mode ]
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80003da:	2302      	movs	r3, #2
 80003dc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003de:	2304      	movs	r3, #4
 80003e0:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003e2:	2301      	movs	r3, #1
 80003e4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB , &PinCfg);
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	480a      	ldr	r0, [pc, #40]	; (8000414 <GPIO_Init+0x54>)
 80003ec:	f7ff ff27 	bl	800023e <MCAL_GPIO_Init>

	// PB13 AS OUTPUT  [ PUSH PULL mode ]
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80003f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_OD;
 80003f6:	2305      	movs	r3, #5
 80003f8:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003fa:	2301      	movs	r3, #1
 80003fc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB , &PinCfg);
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <GPIO_Init+0x54>)
 8000404:	f7ff ff1b 	bl	800023e <MCAL_GPIO_Init>

}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00

08000418 <wait>:


void wait(uint32_t time){
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i =0 ; i < time; i++)
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	e00b      	b.n	800043e <wait+0x26>
		for(j= 0 ; j < 255; j++);
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	e002      	b.n	8000432 <wait+0x1a>
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	3301      	adds	r3, #1
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	2bfe      	cmp	r3, #254	; 0xfe
 8000436:	d9f9      	bls.n	800042c <wait+0x14>
	for(i =0 ; i < time; i++)
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	3301      	adds	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	429a      	cmp	r2, r3
 8000444:	d3ef      	bcc.n	8000426 <wait+0xe>
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <main>:

int main()
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	Clock_Init();
 8000454:	f7ff ffa0 	bl	8000398 <Clock_Init>
	GPIO_Init();
 8000458:	f7ff ffb2 	bl	80003c0 <GPIO_Init>

	while(1)
	{
		// PA1  >>>  Connected external PU Resistance
		if((MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) == 0)
 800045c:	2102      	movs	r1, #2
 800045e:	4811      	ldr	r0, [pc, #68]	; (80004a4 <main+0x54>)
 8000460:	f7ff ff71 	bl	8000346 <MCAL_GPIO_ReadPin>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d10b      	bne.n	8000482 <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIOB , GPIO_PIN_1);
 800046a:	2102      	movs	r1, #2
 800046c:	480e      	ldr	r0, [pc, #56]	; (80004a8 <main+0x58>)
 800046e:	f7ff ff81 	bl	8000374 <MCAL_GPIO_TogglePin>
			while((MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) == 0);
 8000472:	bf00      	nop
 8000474:	2102      	movs	r1, #2
 8000476:	480b      	ldr	r0, [pc, #44]	; (80004a4 <main+0x54>)
 8000478:	f7ff ff65 	bl	8000346 <MCAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f8      	beq.n	8000474 <main+0x24>
		}

		// PA13  >>>  Connected external PD Resistance
		if((MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)) == 1)
 8000482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000486:	4807      	ldr	r0, [pc, #28]	; (80004a4 <main+0x54>)
 8000488:	f7ff ff5d 	bl	8000346 <MCAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	2b01      	cmp	r3, #1
 8000490:	d104      	bne.n	800049c <main+0x4c>
		{
			MCAL_GPIO_TogglePin(GPIOB , GPIO_PIN_13);
 8000492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <main+0x58>)
 8000498:	f7ff ff6c 	bl	8000374 <MCAL_GPIO_TogglePin>
		}

		wait(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ffbb 	bl	8000418 <wait>
		if((MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) == 0)
 80004a2:	e7db      	b.n	800045c <main+0xc>
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40010c00 	.word	0x40010c00

080004ac <Reset_Handler>:
 80004ac:	480d      	ldr	r0, [pc, #52]	; (80004e4 <LoopForever+0x2>)
 80004ae:	4685      	mov	sp, r0
 80004b0:	f3af 8000 	nop.w
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <LoopForever+0x6>)
 80004b6:	490d      	ldr	r1, [pc, #52]	; (80004ec <LoopForever+0xa>)
 80004b8:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <LoopForever+0xe>)
 80004ba:	2300      	movs	r3, #0
 80004bc:	e002      	b.n	80004c4 <LoopCopyDataInit>

080004be <CopyDataInit>:
 80004be:	58d4      	ldr	r4, [r2, r3]
 80004c0:	50c4      	str	r4, [r0, r3]
 80004c2:	3304      	adds	r3, #4

080004c4 <LoopCopyDataInit>:
 80004c4:	18c4      	adds	r4, r0, r3
 80004c6:	428c      	cmp	r4, r1
 80004c8:	d3f9      	bcc.n	80004be <CopyDataInit>
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <LoopForever+0x12>)
 80004cc:	4c0a      	ldr	r4, [pc, #40]	; (80004f8 <LoopForever+0x16>)
 80004ce:	2300      	movs	r3, #0
 80004d0:	e001      	b.n	80004d6 <LoopFillZerobss>

080004d2 <FillZerobss>:
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	3204      	adds	r2, #4

080004d6 <LoopFillZerobss>:
 80004d6:	42a2      	cmp	r2, r4
 80004d8:	d3fb      	bcc.n	80004d2 <FillZerobss>
 80004da:	f000 f811 	bl	8000500 <__libc_init_array>
 80004de:	f7ff ffb7 	bl	8000450 <main>

080004e2 <LoopForever>:
 80004e2:	e7fe      	b.n	80004e2 <LoopForever>
 80004e4:	20002800 	.word	0x20002800
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000000 	.word	0x20000000
 80004f0:	08000568 	.word	0x08000568
 80004f4:	20000000 	.word	0x20000000
 80004f8:	2000001c 	.word	0x2000001c

080004fc <ADC1_2_IRQHandler>:
 80004fc:	e7fe      	b.n	80004fc <ADC1_2_IRQHandler>
	...

08000500 <__libc_init_array>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	2500      	movs	r5, #0
 8000504:	4e0c      	ldr	r6, [pc, #48]	; (8000538 <__libc_init_array+0x38>)
 8000506:	4c0d      	ldr	r4, [pc, #52]	; (800053c <__libc_init_array+0x3c>)
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	10a4      	asrs	r4, r4, #2
 800050c:	42a5      	cmp	r5, r4
 800050e:	d109      	bne.n	8000524 <__libc_init_array+0x24>
 8000510:	f000 f81a 	bl	8000548 <_init>
 8000514:	2500      	movs	r5, #0
 8000516:	4e0a      	ldr	r6, [pc, #40]	; (8000540 <__libc_init_array+0x40>)
 8000518:	4c0a      	ldr	r4, [pc, #40]	; (8000544 <__libc_init_array+0x44>)
 800051a:	1ba4      	subs	r4, r4, r6
 800051c:	10a4      	asrs	r4, r4, #2
 800051e:	42a5      	cmp	r5, r4
 8000520:	d105      	bne.n	800052e <__libc_init_array+0x2e>
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000528:	4798      	blx	r3
 800052a:	3501      	adds	r5, #1
 800052c:	e7ee      	b.n	800050c <__libc_init_array+0xc>
 800052e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000532:	4798      	blx	r3
 8000534:	3501      	adds	r5, #1
 8000536:	e7f2      	b.n	800051e <__libc_init_array+0x1e>
 8000538:	08000560 	.word	0x08000560
 800053c:	08000560 	.word	0x08000560
 8000540:	08000560 	.word	0x08000560
 8000544:	08000564 	.word	0x08000564

08000548 <_init>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr

08000554 <_fini>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr
