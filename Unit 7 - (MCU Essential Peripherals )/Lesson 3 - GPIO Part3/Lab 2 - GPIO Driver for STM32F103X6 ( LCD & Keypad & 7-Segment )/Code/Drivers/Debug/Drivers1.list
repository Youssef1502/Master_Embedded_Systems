
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b50  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cac  08000cac  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000cac  08000cac  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cac  08000cac  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cac  08000cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000020  08000cd4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000cd4  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000306d  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000082d  00000000  00000000  000230b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006f4  00000000  00000000  000238e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000140  00000000  00000000  00023fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00024118  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000254c  00000000  00000000  00024210  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001bc9  00000000  00000000  0002675c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008ce2  00000000  00000000  00028325  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031007  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003ac  00000000  00000000  00031084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c68 	.word	0x08000c68

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000c68 	.word	0x08000c68

08000170 <clock_init>:
#define SEVEN	0b1111000
#define EIGHT	0b0000000
#define NINE	0b0010000


void clock_init() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:


void GPIO_init() {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800019e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <GPIO_init+0xb8>)
 80001b2:	f000 fc74 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <GPIO_init+0xb8>)
 80001ca:	f000 fc68 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <GPIO_init+0xb8>)
 80001e2:	f000 fc5c 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <GPIO_init+0xb8>)
 80001fa:	f000 fc50 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <GPIO_init+0xb8>)
 8000212:	f000 fc44 	bl	8000a9e <MCAL_GPIO_Init>

	//============================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <GPIO_init+0xb8>)
 800022a:	f000 fc38 	bl	8000a9e <MCAL_GPIO_Init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <GPIO_init+0xb8>)
 8000242:	f000 fc2c 	bl	8000a9e <MCAL_GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <wait_ms>:


void wait_ms(uint32_t time) {
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e00b      	b.n	800027a <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	e002      	b.n	800026e <wait_ms+0x1a>
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	3301      	adds	r3, #1
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	2bfe      	cmp	r3, #254	; 0xfe
 8000272:	d9f9      	bls.n	8000268 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3301      	adds	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	429a      	cmp	r2, r3
 8000280:	d3ef      	bcc.n	8000262 <wait_ms+0xe>
			;
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <main>:


int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
	clock_init();
 8000292:	f7ff ff6d 	bl	8000170 <clock_init>
	LCD_Init();
 8000296:	f000 f9ef 	bl	8000678 <LCD_Init>
	unsigned char key_pressed;
	LCD_WRITE_STRING("HEY");
 800029a:	482f      	ldr	r0, [pc, #188]	; (8000358 <main+0xcc>)
 800029c:	f000 fb4e 	bl	800093c <LCD_WRITE_STRING>
	wait_ms(300);
 80002a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002a4:	f7ff ffd6 	bl	8000254 <wait_ms>
	LCD_Clear();
 80002a8:	f000 fade 	bl	8000868 <LCD_Clear>
	GPIO_init();
 80002ac:	f7ff ff74 	bl	8000198 <GPIO_init>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 80002b0:	4a2a      	ldr	r2, [pc, #168]	; (800035c <main+0xd0>)
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b8:	c303      	stmia	r3!, {r0, r1}
 80002ba:	801a      	strh	r2, [r3, #0]
 80002bc:	3302      	adds	r3, #2
 80002be:	0c12      	lsrs	r2, r2, #16
 80002c0:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 80002c2:	4a27      	ldr	r2, [pc, #156]	; (8000360 <main+0xd4>)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c8:	c303      	stmia	r3!, {r0, r1}
 80002ca:	801a      	strh	r2, [r3, #0]
 80002cc:	3302      	adds	r3, #2
 80002ce:	0c12      	lsrs	r2, r2, #16
 80002d0:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	77fb      	strb	r3, [r7, #31]
 80002d6:	e01b      	b.n	8000310 <main+0x84>
	{
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 80002d8:	7ffb      	ldrb	r3, [r7, #31]
 80002da:	f107 0220 	add.w	r2, r7, #32
 80002de:	4413      	add	r3, r2
 80002e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fad1 	bl	800088c <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 80002ea:	7ffb      	ldrb	r3, [r7, #31]
 80002ec:	f107 0220 	add.w	r2, r7, #32
 80002f0:	4413      	add	r3, r2
 80002f2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	025b      	lsls	r3, r3, #9
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	4819      	ldr	r0, [pc, #100]	; (8000364 <main+0xd8>)
 8000300:	f000 fc7f 	bl	8000c02 <MCAL_GPIO_WritePort>
		wait_ms(200);
 8000304:	20c8      	movs	r0, #200	; 0xc8
 8000306:	f7ff ffa5 	bl	8000254 <wait_ms>
	for (unsigned char i = 0; i < 11; i++)
 800030a:	7ffb      	ldrb	r3, [r7, #31]
 800030c:	3301      	adds	r3, #1
 800030e:	77fb      	strb	r3, [r7, #31]
 8000310:	7ffb      	ldrb	r3, [r7, #31]
 8000312:	2b0a      	cmp	r3, #10
 8000314:	d9e0      	bls.n	80002d8 <main+0x4c>
		/* wait for 1 second */
	}
	LCD_Clear();
 8000316:	f000 faa7 	bl	8000868 <LCD_Clear>
	KEYPAD_INIT();
 800031a:	f000 f851 	bl	80003c0 <KEYPAD_INIT>
	LCD_WRITE_STRING("Keypad is ready");
 800031e:	4812      	ldr	r0, [pc, #72]	; (8000368 <main+0xdc>)
 8000320:	f000 fb0c 	bl	800093c <LCD_WRITE_STRING>
	wait_ms(30);
 8000324:	201e      	movs	r0, #30
 8000326:	f7ff ff95 	bl	8000254 <wait_ms>
	LCD_Clear();
 800032a:	f000 fa9d 	bl	8000868 <LCD_Clear>

	while (1)
	{
		key_pressed = KEYPAD_GET_CHAR();
 800032e:	f000 f8bd 	bl	80004ac <KEYPAD_GET_CHAR>
 8000332:	4603      	mov	r3, r0
 8000334:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed)
 8000336:	7fbb      	ldrb	r3, [r7, #30]
 8000338:	2b21      	cmp	r3, #33	; 0x21
 800033a:	d002      	beq.n	8000342 <main+0xb6>
 800033c:	2b4e      	cmp	r3, #78	; 0x4e
 800033e:	d008      	beq.n	8000352 <main+0xc6>
 8000340:	e002      	b.n	8000348 <main+0xbc>
		{
		case 'N':
			break;
		case '!':
			LCD_Clear();
 8000342:	f000 fa91 	bl	8000868 <LCD_Clear>
			break;
 8000346:	e005      	b.n	8000354 <main+0xc8>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000348:	7fbb      	ldrb	r3, [r7, #30]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fa9e 	bl	800088c <LCD_WRITE_CHAR>
			break;
 8000350:	e000      	b.n	8000354 <main+0xc8>
			break;
 8000352:	bf00      	nop
		key_pressed = KEYPAD_GET_CHAR();
 8000354:	e7eb      	b.n	800032e <main+0xa2>
 8000356:	bf00      	nop
 8000358:	08000c80 	.word	0x08000c80
 800035c:	08000c94 	.word	0x08000c94
 8000360:	08000ca0 	.word	0x08000ca0
 8000364:	40010c00 	.word	0x40010c00
 8000368:	08000c84 	.word	0x08000c84

0800036c <Reset_Handler>:
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
 800036e:	4685      	mov	sp, r0
 8000370:	f3af 8000 	nop.w
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
 800037a:	2300      	movs	r3, #0
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:
 800037e:	58d4      	ldr	r4, [r2, r3]
 8000380:	50c4      	str	r4, [r0, r3]
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:
 8000384:	18c4      	adds	r4, r0, r3
 8000386:	428c      	cmp	r4, r1
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
 800038e:	2300      	movs	r3, #0
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:
 8000392:	6013      	str	r3, [r2, #0]
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:
 8000396:	42a2      	cmp	r2, r4
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>
 800039a:	f000 fc41 	bl	8000c20 <__libc_init_array>
 800039e:	f7ff ff75 	bl	800028c <main>

080003a2 <LoopForever>:
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
 80003a4:	20002800 	.word	0x20002800
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000020 	.word	0x20000020
 80003b0:	08000cb4 	.word	0x08000cb4
 80003b4:	20000020 	.word	0x20000020
 80003b8:	20000044 	.word	0x20000044

080003bc <ADC1_2_IRQHandler>:
 80003bc:	e7fe      	b.n	80003bc <ADC1_2_IRQHandler>
	...

080003c0 <KEYPAD_INIT>:

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3}; //columns

void KEYPAD_INIT()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
//
//	PinCfg.GPIO_PinNumber = R3;
//	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
//	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);

	PinCfg.GPIO_PinNumber = R0;
 80003c4:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003ca:	4b36      	ldr	r3, [pc, #216]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003d0:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80003d6:	4933      	ldr	r1, [pc, #204]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003d8:	4833      	ldr	r0, [pc, #204]	; (80004a8 <KEYPAD_INIT+0xe8>)
 80003da:	f000 fb60 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 80003de:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003e0:	2202      	movs	r2, #2
 80003e2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003e4:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ea:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80003f0:	492c      	ldr	r1, [pc, #176]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003f2:	482d      	ldr	r0, [pc, #180]	; (80004a8 <KEYPAD_INIT+0xe8>)
 80003f4:	f000 fb53 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <KEYPAD_INIT+0xe4>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000400:	2204      	movs	r2, #4
 8000402:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000406:	2201      	movs	r2, #1
 8000408:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800040a:	4926      	ldr	r1, [pc, #152]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800040c:	4826      	ldr	r0, [pc, #152]	; (80004a8 <KEYPAD_INIT+0xe8>)
 800040e:	f000 fb46 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000414:	2210      	movs	r2, #16
 8000416:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000418:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800041a:	2204      	movs	r2, #4
 800041c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000420:	2201      	movs	r2, #1
 8000422:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000424:	491f      	ldr	r1, [pc, #124]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000426:	4820      	ldr	r0, [pc, #128]	; (80004a8 <KEYPAD_INIT+0xe8>)
 8000428:	f000 fb39 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800042e:	2220      	movs	r2, #32
 8000430:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000434:	2204      	movs	r2, #4
 8000436:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800043a:	2201      	movs	r2, #1
 800043c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800043e:	4919      	ldr	r1, [pc, #100]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000440:	4819      	ldr	r0, [pc, #100]	; (80004a8 <KEYPAD_INIT+0xe8>)
 8000442:	f000 fb2c 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000448:	2240      	movs	r2, #64	; 0x40
 800044a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800044e:	2204      	movs	r2, #4
 8000450:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000454:	2201      	movs	r2, #1
 8000456:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000458:	4912      	ldr	r1, [pc, #72]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800045a:	4813      	ldr	r0, [pc, #76]	; (80004a8 <KEYPAD_INIT+0xe8>)
 800045c:	f000 fb1f 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000468:	2204      	movs	r2, #4
 800046a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800046e:	2201      	movs	r2, #1
 8000470:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000472:	490c      	ldr	r1, [pc, #48]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <KEYPAD_INIT+0xe8>)
 8000476:	f000 fb12 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C3;
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800047c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000480:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000484:	2204      	movs	r2, #4
 8000486:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <KEYPAD_INIT+0xe4>)
 800048a:	2201      	movs	r2, #1
 800048c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800048e:	4905      	ldr	r1, [pc, #20]	; (80004a4 <KEYPAD_INIT+0xe4>)
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <KEYPAD_INIT+0xe8>)
 8000492:	f000 fb04 	bl	8000a9e <MCAL_GPIO_Init>

	// KEYPAD_PORT = 0xFF;
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000496:	21ff      	movs	r1, #255	; 0xff
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <KEYPAD_INIT+0xe8>)
 800049a:	f000 fbb2 	bl	8000c02 <MCAL_GPIO_WritePort>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000040 	.word	0x20000040
 80004a8:	40010c00 	.word	0x40010c00

080004ac <KEYPAD_GET_CHAR>:

//=====================================================================

unsigned char KEYPAD_GET_CHAR()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++){
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e0b4      	b.n	8000622 <KEYPAD_GET_CHAR+0x176>
		// KEEP ALL COLUMNS BY 1 IN BEGINNING EVERY LOOP
		//KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 80004b8:	4b5e      	ldr	r3, [pc, #376]	; (8000634 <KEYPAD_GET_CHAR+0x188>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	485d      	ldr	r0, [pc, #372]	; (8000638 <KEYPAD_GET_CHAR+0x18c>)
 80004c4:	f000 fb86 	bl	8000bd4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80004c8:	4b5a      	ldr	r3, [pc, #360]	; (8000634 <KEYPAD_GET_CHAR+0x188>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	4859      	ldr	r0, [pc, #356]	; (8000638 <KEYPAD_GET_CHAR+0x18c>)
 80004d4:	f000 fb7e 	bl	8000bd4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 80004d8:	4b56      	ldr	r3, [pc, #344]	; (8000634 <KEYPAD_GET_CHAR+0x188>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	4855      	ldr	r0, [pc, #340]	; (8000638 <KEYPAD_GET_CHAR+0x18c>)
 80004e4:	f000 fb76 	bl	8000bd4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 80004e8:	4b52      	ldr	r3, [pc, #328]	; (8000634 <KEYPAD_GET_CHAR+0x188>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	4851      	ldr	r0, [pc, #324]	; (8000638 <KEYPAD_GET_CHAR+0x18c>)
 80004f4:	f000 fb6e 	bl	8000bd4 <MCAL_GPIO_WritePin>

		// SEND LOW TO THE A PARTICULAR ROW OF THE KEYPAD
		//KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 80004f8:	4a4e      	ldr	r2, [pc, #312]	; (8000634 <KEYPAD_GET_CHAR+0x188>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000500:	b29b      	uxth	r3, r3
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	484c      	ldr	r0, [pc, #304]	; (8000638 <KEYPAD_GET_CHAR+0x18c>)
 8000508:	f000 fb64 	bl	8000bd4 <MCAL_GPIO_WritePin>
		for(j = 0; j < 4; j++)
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e080      	b.n	8000614 <KEYPAD_GET_CHAR+0x168>
		{
			if ( MCAL_GPIO_ReadPin(KEYPAD_PORT,Key_padRow[j]) == 0 )
 8000512:	4a4a      	ldr	r2, [pc, #296]	; (800063c <KEYPAD_GET_CHAR+0x190>)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051a:	b29b      	uxth	r3, r3
 800051c:	4619      	mov	r1, r3
 800051e:	4846      	ldr	r0, [pc, #280]	; (8000638 <KEYPAD_GET_CHAR+0x18c>)
 8000520:	f000 fb41 	bl	8000ba6 <MCAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d171      	bne.n	800060e <KEYPAD_GET_CHAR+0x162>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT,Key_padRow[j]) == 0);
 800052a:	bf00      	nop
 800052c:	4a43      	ldr	r2, [pc, #268]	; (800063c <KEYPAD_GET_CHAR+0x190>)
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000534:	b29b      	uxth	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	483f      	ldr	r0, [pc, #252]	; (8000638 <KEYPAD_GET_CHAR+0x18c>)
 800053a:	f000 fb34 	bl	8000ba6 <MCAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f3      	beq.n	800052c <KEYPAD_GET_CHAR+0x80>
				switch(i)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d861      	bhi.n	800060e <KEYPAD_GET_CHAR+0x162>
 800054a:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <KEYPAD_GET_CHAR+0xa4>)
 800054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000550:	08000561 	.word	0x08000561
 8000554:	08000589 	.word	0x08000589
 8000558:	080005b1 	.word	0x080005b1
 800055c:	080005d9 	.word	0x080005d9
				{
					case (0):
						if (j == 0) return '7';
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d101      	bne.n	800056a <KEYPAD_GET_CHAR+0xbe>
 8000566:	2337      	movs	r3, #55	; 0x37
 8000568:	e060      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 1) return '4';
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d101      	bne.n	8000574 <KEYPAD_GET_CHAR+0xc8>
 8000570:	2334      	movs	r3, #52	; 0x34
 8000572:	e05b      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 2) return '1';
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d101      	bne.n	800057e <KEYPAD_GET_CHAR+0xd2>
 800057a:	2331      	movs	r3, #49	; 0x31
 800057c:	e056      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 3) return '!';
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d13d      	bne.n	8000600 <KEYPAD_GET_CHAR+0x154>
 8000584:	2321      	movs	r3, #33	; 0x21
 8000586:	e051      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						break;
					case (1):
						if (j == 0) return '8';
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d101      	bne.n	8000592 <KEYPAD_GET_CHAR+0xe6>
 800058e:	2338      	movs	r3, #56	; 0x38
 8000590:	e04c      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 1) return '5';
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d101      	bne.n	800059c <KEYPAD_GET_CHAR+0xf0>
 8000598:	2335      	movs	r3, #53	; 0x35
 800059a:	e047      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 2) return '2';
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d101      	bne.n	80005a6 <KEYPAD_GET_CHAR+0xfa>
 80005a2:	2332      	movs	r3, #50	; 0x32
 80005a4:	e042      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 3) return '0';
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d12b      	bne.n	8000604 <KEYPAD_GET_CHAR+0x158>
 80005ac:	2330      	movs	r3, #48	; 0x30
 80005ae:	e03d      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						break;
					case (2):
						if (j == 0) return '9';
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <KEYPAD_GET_CHAR+0x10e>
 80005b6:	2339      	movs	r3, #57	; 0x39
 80005b8:	e038      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 1) return '6';
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d101      	bne.n	80005c4 <KEYPAD_GET_CHAR+0x118>
 80005c0:	2336      	movs	r3, #54	; 0x36
 80005c2:	e033      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 2) return '3';
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d101      	bne.n	80005ce <KEYPAD_GET_CHAR+0x122>
 80005ca:	2333      	movs	r3, #51	; 0x33
 80005cc:	e02e      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 3) return '=';
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d119      	bne.n	8000608 <KEYPAD_GET_CHAR+0x15c>
 80005d4:	233d      	movs	r3, #61	; 0x3d
 80005d6:	e029      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						break;
					case (3):
						if (j == 0) return '/';
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <KEYPAD_GET_CHAR+0x136>
 80005de:	232f      	movs	r3, #47	; 0x2f
 80005e0:	e024      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 1) return '*';
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d101      	bne.n	80005ec <KEYPAD_GET_CHAR+0x140>
 80005e8:	232a      	movs	r3, #42	; 0x2a
 80005ea:	e01f      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 2) return '-';
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d101      	bne.n	80005f6 <KEYPAD_GET_CHAR+0x14a>
 80005f2:	232d      	movs	r3, #45	; 0x2d
 80005f4:	e01a      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						else if (j == 3) return '+';
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d107      	bne.n	800060c <KEYPAD_GET_CHAR+0x160>
 80005fc:	232b      	movs	r3, #43	; 0x2b
 80005fe:	e015      	b.n	800062c <KEYPAD_GET_CHAR+0x180>
						break;
 8000600:	bf00      	nop
 8000602:	e004      	b.n	800060e <KEYPAD_GET_CHAR+0x162>
						break;
 8000604:	bf00      	nop
 8000606:	e002      	b.n	800060e <KEYPAD_GET_CHAR+0x162>
						break;
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <KEYPAD_GET_CHAR+0x162>
						break;
 800060c:	bf00      	nop
		for(j = 0; j < 4; j++)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b03      	cmp	r3, #3
 8000618:	f77f af7b 	ble.w	8000512 <KEYPAD_GET_CHAR+0x66>
	for (i = 0; i < 4; i++){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b03      	cmp	r3, #3
 8000626:	f77f af47 	ble.w	80004b8 <KEYPAD_GET_CHAR+0xc>
				}
			}
		}
	}
	return 'N';
 800062a:	234e      	movs	r3, #78	; 0x4e
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000010 	.word	0x20000010
 8000638:	40010c00 	.word	0x40010c00
 800063c:	20000000 	.word	0x20000000

08000640 <delay_ms>:

static int count=0;


void delay_ms(uint32_t time)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e00b      	b.n	8000666 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	e002      	b.n	800065a <delay_ms+0x1a>
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	3301      	adds	r3, #1
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	2bfe      	cmp	r3, #254	; 0xfe
 800065e:	d9f9      	bls.n	8000654 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3301      	adds	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	d3ef      	bcc.n	800064e <delay_ms+0xe>
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <LCD_Init>:


void LCD_Init()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	// CONNECT RW PIN BY GROUND EXTERNALLY AND DO NOT CONNECT BY ANY SoC PINS

	// For 4-bit interface data, only four bus lines (DB4 to DB7) are used for transfer
	// SHOULD SEND [ 0x02 ] in LCD COMMAND BEFORE USE FOUR BIT MODE FROM LCD DATA SHEET
	//	DataDir_LCD_PORT |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	PinCfg.GPIO_PinNumber = RSPIN;
 800067c:	4b57      	ldr	r3, [pc, #348]	; (80007dc <LCD_Init+0x164>)
 800067e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000682:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000684:	4b55      	ldr	r3, [pc, #340]	; (80007dc <LCD_Init+0x164>)
 8000686:	2204      	movs	r2, #4
 8000688:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800068a:	4b54      	ldr	r3, [pc, #336]	; (80007dc <LCD_Init+0x164>)
 800068c:	2201      	movs	r2, #1
 800068e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000690:	4952      	ldr	r1, [pc, #328]	; (80007dc <LCD_Init+0x164>)
 8000692:	4853      	ldr	r0, [pc, #332]	; (80007e0 <LCD_Init+0x168>)
 8000694:	f000 fa03 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RWPIN;
 8000698:	4b50      	ldr	r3, [pc, #320]	; (80007dc <LCD_Init+0x164>)
 800069a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006a0:	4b4e      	ldr	r3, [pc, #312]	; (80007dc <LCD_Init+0x164>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006a6:	4b4d      	ldr	r3, [pc, #308]	; (80007dc <LCD_Init+0x164>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80006ac:	494b      	ldr	r1, [pc, #300]	; (80007dc <LCD_Init+0x164>)
 80006ae:	484c      	ldr	r0, [pc, #304]	; (80007e0 <LCD_Init+0x168>)
 80006b0:	f000 f9f5 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = ENPIN;
 80006b4:	4b49      	ldr	r3, [pc, #292]	; (80007dc <LCD_Init+0x164>)
 80006b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006bc:	4b47      	ldr	r3, [pc, #284]	; (80007dc <LCD_Init+0x164>)
 80006be:	2204      	movs	r2, #4
 80006c0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006c2:	4b46      	ldr	r3, [pc, #280]	; (80007dc <LCD_Init+0x164>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80006c8:	4944      	ldr	r1, [pc, #272]	; (80007dc <LCD_Init+0x164>)
 80006ca:	4845      	ldr	r0, [pc, #276]	; (80007e0 <LCD_Init+0x168>)
 80006cc:	f000 f9e7 	bl	8000a9e <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(LCD_PORT, RWPIN, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d6:	4842      	ldr	r0, [pc, #264]	; (80007e0 <LCD_Init+0x168>)
 80006d8:	f000 fa7c 	bl	8000bd4 <MCAL_GPIO_WritePin>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80006dc:	4b3f      	ldr	r3, [pc, #252]	; (80007dc <LCD_Init+0x164>)
 80006de:	2201      	movs	r2, #1
 80006e0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006e2:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <LCD_Init+0x164>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006e8:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <LCD_Init+0x164>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80006ee:	493b      	ldr	r1, [pc, #236]	; (80007dc <LCD_Init+0x164>)
 80006f0:	483b      	ldr	r0, [pc, #236]	; (80007e0 <LCD_Init+0x168>)
 80006f2:	f000 f9d4 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80006f6:	4b39      	ldr	r3, [pc, #228]	; (80007dc <LCD_Init+0x164>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006fc:	4b37      	ldr	r3, [pc, #220]	; (80007dc <LCD_Init+0x164>)
 80006fe:	2204      	movs	r2, #4
 8000700:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <LCD_Init+0x164>)
 8000704:	2201      	movs	r2, #1
 8000706:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000708:	4934      	ldr	r1, [pc, #208]	; (80007dc <LCD_Init+0x164>)
 800070a:	4835      	ldr	r0, [pc, #212]	; (80007e0 <LCD_Init+0x168>)
 800070c:	f000 f9c7 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <LCD_Init+0x164>)
 8000712:	2204      	movs	r2, #4
 8000714:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <LCD_Init+0x164>)
 8000718:	2204      	movs	r2, #4
 800071a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800071c:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <LCD_Init+0x164>)
 800071e:	2201      	movs	r2, #1
 8000720:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000722:	492e      	ldr	r1, [pc, #184]	; (80007dc <LCD_Init+0x164>)
 8000724:	482e      	ldr	r0, [pc, #184]	; (80007e0 <LCD_Init+0x168>)
 8000726:	f000 f9ba 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <LCD_Init+0x164>)
 800072c:	2208      	movs	r2, #8
 800072e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <LCD_Init+0x164>)
 8000732:	2204      	movs	r2, #4
 8000734:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000736:	4b29      	ldr	r3, [pc, #164]	; (80007dc <LCD_Init+0x164>)
 8000738:	2201      	movs	r2, #1
 800073a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800073c:	4927      	ldr	r1, [pc, #156]	; (80007dc <LCD_Init+0x164>)
 800073e:	4828      	ldr	r0, [pc, #160]	; (80007e0 <LCD_Init+0x168>)
 8000740:	f000 f9ad 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <LCD_Init+0x164>)
 8000746:	2210      	movs	r2, #16
 8000748:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <LCD_Init+0x164>)
 800074c:	2204      	movs	r2, #4
 800074e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <LCD_Init+0x164>)
 8000752:	2201      	movs	r2, #1
 8000754:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000756:	4921      	ldr	r1, [pc, #132]	; (80007dc <LCD_Init+0x164>)
 8000758:	4821      	ldr	r0, [pc, #132]	; (80007e0 <LCD_Init+0x168>)
 800075a:	f000 f9a0 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <LCD_Init+0x164>)
 8000760:	2220      	movs	r2, #32
 8000762:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <LCD_Init+0x164>)
 8000766:	2204      	movs	r2, #4
 8000768:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <LCD_Init+0x164>)
 800076c:	2201      	movs	r2, #1
 800076e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000770:	491a      	ldr	r1, [pc, #104]	; (80007dc <LCD_Init+0x164>)
 8000772:	481b      	ldr	r0, [pc, #108]	; (80007e0 <LCD_Init+0x168>)
 8000774:	f000 f993 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <LCD_Init+0x164>)
 800077a:	2240      	movs	r2, #64	; 0x40
 800077c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <LCD_Init+0x164>)
 8000780:	2204      	movs	r2, #4
 8000782:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <LCD_Init+0x164>)
 8000786:	2201      	movs	r2, #1
 8000788:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800078a:	4914      	ldr	r1, [pc, #80]	; (80007dc <LCD_Init+0x164>)
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <LCD_Init+0x168>)
 800078e:	f000 f986 	bl	8000a9e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <LCD_Init+0x164>)
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <LCD_Init+0x164>)
 800079a:	2204      	movs	r2, #4
 800079c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <LCD_Init+0x164>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80007a4:	490d      	ldr	r1, [pc, #52]	; (80007dc <LCD_Init+0x164>)
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <LCD_Init+0x168>)
 80007a8:	f000 f979 	bl	8000a9e <MCAL_GPIO_Init>

	delay_ms(15);
 80007ac:	200f      	movs	r0, #15
 80007ae:	f7ff ff47 	bl	8000640 <delay_ms>
	LCD_WRITE_COMMAND(FOUR_BIT_CONTROL);						// 4-BIT CONTROL
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 f816 	bl	80007e4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);				// CONTROL MATRIX 4-BIT
 80007b8:	2028      	movs	r0, #40	; 0x28
 80007ba:	f000 f813 	bl	80007e4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(DISABLE_CURSOR);			   			    // DISABLE CURSOR
 80007be:	200c      	movs	r0, #12
 80007c0:	f000 f810 	bl	80007e4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);							// MOVE CURSOR
 80007c4:	2006      	movs	r0, #6
 80007c6:	f000 f80d 	bl	80007e4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);						// CLEAN LCD
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 f80a 	bl	80007e4 <LCD_WRITE_COMMAND>
	delay_ms(2);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f7ff ff35 	bl	8000640 <delay_ms>
#endif
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000040 	.word	0x20000040
 80007e0:	40010800 	.word	0x40010800

080007e4 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	LCD_kick();
#endif

#ifdef FOUR_BIT_MODE
	// SEND THE DATA TWICE
	MCAL_GPIO_WritePort(LCD_PORT,(LCD_PORT->ODR & 0xFF0F) | (command & 0xF0));
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <LCD_WRITE_COMMAND+0x80>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000802:	b29b      	uxth	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b29b      	uxth	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	4816      	ldr	r0, [pc, #88]	; (8000864 <LCD_WRITE_COMMAND+0x80>)
 800080c:	f000 f9f9 	bl	8000c02 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORT, RSPIN, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4813      	ldr	r0, [pc, #76]	; (8000864 <LCD_WRITE_COMMAND+0x80>)
 8000818:	f000 f9dc 	bl	8000bd4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RWPIN, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <LCD_WRITE_COMMAND+0x80>)
 8000824:	f000 f9d6 	bl	8000bd4 <MCAL_GPIO_WritePin>
	LCD_kick();
 8000828:	f000 f89c 	bl	8000964 <LCD_kick>
	delay_ms(2);
 800082c:	2002      	movs	r0, #2
 800082e:	f7ff ff07 	bl	8000640 <delay_ms>
	MCAL_GPIO_WritePort(LCD_PORT, (LCD_PORT->ODR & 0xFF0F) | (command << 4));
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <LCD_WRITE_COMMAND+0x80>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	b29b      	uxth	r3, r3
 8000838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800083c:	b29a      	uxth	r2, r3
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	b29b      	uxth	r3, r3
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	b29b      	uxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b29b      	uxth	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <LCD_WRITE_COMMAND+0x80>)
 800084e:	f000 f9d8 	bl	8000c02 <MCAL_GPIO_WritePort>
	LCD_kick();
 8000852:	f000 f887 	bl	8000964 <LCD_kick>
	delay_ms(2);
 8000856:	2002      	movs	r0, #2
 8000858:	f7ff fef2 	bl	8000640 <delay_ms>
#endif
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40010800 	.word	0x40010800

08000868 <LCD_Clear>:


void LCD_Clear()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND (LCD_CLEAR_SCREEN);							// CLEAN LCD
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ffb9 	bl	80007e4 <LCD_WRITE_COMMAND>
	delay_ms(2);													// WAIT TO CLEAN LCD
 8000872:	2002      	movs	r0, #2
 8000874:	f7ff fee4 	bl	8000640 <delay_ms>
	LCD_WRITE_COMMAND (LCD_BEGIN_AT_FIRST_ROW);
 8000878:	2080      	movs	r0, #128	; 0x80
 800087a:	f7ff ffb3 	bl	80007e4 <LCD_WRITE_COMMAND>
	count=0;
 800087e:	4b02      	ldr	r3, [pc, #8]	; (8000888 <LCD_Clear+0x20>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000003c 	.word	0x2000003c

0800088c <LCD_WRITE_CHAR>:


void LCD_WRITE_CHAR(unsigned char character)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
#ifdef FOUR_BIT_MODE
	// TO MAKE SURE THE FOUR BIT MODE WILL WORK GOOD
	// CONNECT RW PIN BY GROUND EXTERNALLY AND DO NOT CONNECT BY ANY SoC PINS
	// TO SEND COMMAND TO LCD
	// A) SET PORT DIRECTION AS OUTPUT [ DONE IN INIT FUN ]
	if(count == 16)
 8000896:	4b27      	ldr	r3, [pc, #156]	; (8000934 <LCD_WRITE_CHAR+0xa8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b10      	cmp	r3, #16
 800089c:	d104      	bne.n	80008a8 <LCD_WRITE_CHAR+0x1c>
	{
		LCD_GOTO_XY(2,0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2002      	movs	r0, #2
 80008a2:	f000 f875 	bl	8000990 <LCD_GOTO_XY>
 80008a6:	e00c      	b.n	80008c2 <LCD_WRITE_CHAR+0x36>
	}
	else if (count == 32)
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <LCD_WRITE_CHAR+0xa8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b20      	cmp	r3, #32
 80008ae:	d108      	bne.n	80008c2 <LCD_WRITE_CHAR+0x36>
	{
		LCD_Clear();
 80008b0:	f7ff ffda 	bl	8000868 <LCD_Clear>
		LCD_GOTO_XY(1,0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 f86a 	bl	8000990 <LCD_GOTO_XY>
		count = 0;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <LCD_WRITE_CHAR+0xa8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
	}
	MCAL_GPIO_WritePort(LCD_PORT,(LCD_PORT->ODR & 0xFF0F) | (character & 0xF0));
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <LCD_WRITE_CHAR+0xac>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <LCD_WRITE_CHAR+0xac>)
 80008e0:	f000 f98f 	bl	8000c02 <MCAL_GPIO_WritePort>
	// TURN RS ON FOR DATA MODE
	MCAL_GPIO_WritePin(LCD_PORT, RSPIN, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ea:	4813      	ldr	r0, [pc, #76]	; (8000938 <LCD_WRITE_CHAR+0xac>)
 80008ec:	f000 f972 	bl	8000bd4 <MCAL_GPIO_WritePin>
	LCD_kick();
 80008f0:	f000 f838 	bl	8000964 <LCD_kick>
	delay_ms(200);
 80008f4:	20c8      	movs	r0, #200	; 0xc8
 80008f6:	f7ff fea3 	bl	8000640 <delay_ms>
	MCAL_GPIO_WritePort(LCD_PORT,(LCD_PORT->ODR & 0xFF0F) | (character << 4));
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <LCD_WRITE_CHAR+0xac>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000904:	b29a      	uxth	r2, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	b29b      	uxth	r3, r3
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	b29b      	uxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	4619      	mov	r1, r3
 8000914:	4808      	ldr	r0, [pc, #32]	; (8000938 <LCD_WRITE_CHAR+0xac>)
 8000916:	f000 f974 	bl	8000c02 <MCAL_GPIO_WritePort>
	delay_ms(1);
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff fe90 	bl	8000640 <delay_ms>
	LCD_kick();
 8000920:	f000 f820 	bl	8000964 <LCD_kick>
	delay_ms(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f7ff fe8b 	bl	8000640 <delay_ms>
#endif

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000003c 	.word	0x2000003c
 8000938:	40010800 	.word	0x40010800

0800093c <LCD_WRITE_STRING>:


void LCD_WRITE_STRING (char *str)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	while(*str > 0)
 8000944:	e006      	b.n	8000954 <LCD_WRITE_STRING+0x18>
	{
		LCD_WRITE_CHAR(*str++);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff9c 	bl	800088c <LCD_WRITE_CHAR>
	while(*str > 0)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f4      	bne.n	8000946 <LCD_WRITE_STRING+0xa>
	}
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <LCD_kick>:


void LCD_kick()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_PORT, ENPIN, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <LCD_kick+0x28>)
 8000970:	f000 f930 	bl	8000bd4 <MCAL_GPIO_WritePin>
	delay_ms(2);
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff fe63 	bl	8000640 <delay_ms>
	MCAL_GPIO_WritePin(LCD_PORT, ENPIN, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <LCD_kick+0x28>)
 8000982:	f000 f927 	bl	8000bd4 <MCAL_GPIO_WritePin>
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40010800 	.word	0x40010800

08000990 <LCD_GOTO_XY>:


void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d108      	bne.n	80009b8 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d805      	bhi.n	80009b8 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	3b80      	subs	r3, #128	; 0x80
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff16 	bl	80007e4 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d108      	bne.n	80009d0 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d805      	bhi.n	80009d0 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	3b40      	subs	r3, #64	; 0x40
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff0a 	bl	80007e4 <LCD_WRITE_COMMAND>
		}
	}
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <Get_CRLH_Position>:
==================================================**/

#include "STM32_F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	2b80      	cmp	r3, #128	; 0x80
 80009e6:	d042      	beq.n	8000a6e <Get_CRLH_Position+0x96>
 80009e8:	2b80      	cmp	r3, #128	; 0x80
 80009ea:	dc11      	bgt.n	8000a10 <Get_CRLH_Position+0x38>
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	d036      	beq.n	8000a5e <Get_CRLH_Position+0x86>
 80009f0:	2b08      	cmp	r3, #8
 80009f2:	dc06      	bgt.n	8000a02 <Get_CRLH_Position+0x2a>
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d02e      	beq.n	8000a56 <Get_CRLH_Position+0x7e>
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d02e      	beq.n	8000a5a <Get_CRLH_Position+0x82>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d028      	beq.n	8000a52 <Get_CRLH_Position+0x7a>
 8000a00:	e047      	b.n	8000a92 <Get_CRLH_Position+0xba>
 8000a02:	2b20      	cmp	r3, #32
 8000a04:	d02f      	beq.n	8000a66 <Get_CRLH_Position+0x8e>
 8000a06:	2b40      	cmp	r3, #64	; 0x40
 8000a08:	d02f      	beq.n	8000a6a <Get_CRLH_Position+0x92>
 8000a0a:	2b10      	cmp	r3, #16
 8000a0c:	d029      	beq.n	8000a62 <Get_CRLH_Position+0x8a>
 8000a0e:	e040      	b.n	8000a92 <Get_CRLH_Position+0xba>
 8000a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a14:	d033      	beq.n	8000a7e <Get_CRLH_Position+0xa6>
 8000a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a1a:	dc09      	bgt.n	8000a30 <Get_CRLH_Position+0x58>
 8000a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a20:	d029      	beq.n	8000a76 <Get_CRLH_Position+0x9e>
 8000a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a26:	d028      	beq.n	8000a7a <Get_CRLH_Position+0xa2>
 8000a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a2c:	d021      	beq.n	8000a72 <Get_CRLH_Position+0x9a>
 8000a2e:	e030      	b.n	8000a92 <Get_CRLH_Position+0xba>
 8000a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a34:	d027      	beq.n	8000a86 <Get_CRLH_Position+0xae>
 8000a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a3a:	dc03      	bgt.n	8000a44 <Get_CRLH_Position+0x6c>
 8000a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a40:	d01f      	beq.n	8000a82 <Get_CRLH_Position+0xaa>
 8000a42:	e026      	b.n	8000a92 <Get_CRLH_Position+0xba>
 8000a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a48:	d01f      	beq.n	8000a8a <Get_CRLH_Position+0xb2>
 8000a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a4e:	d01e      	beq.n	8000a8e <Get_CRLH_Position+0xb6>
 8000a50:	e01f      	b.n	8000a92 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e01e      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1 :
		return 4;
 8000a56:	2304      	movs	r3, #4
 8000a58:	e01c      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2 :
		return 8;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	e01a      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3 :
		return 12;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	e018      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000a62:	2310      	movs	r3, #16
 8000a64:	e016      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5 :
		return 20;
 8000a66:	2314      	movs	r3, #20
 8000a68:	e014      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6 :
		return 24;
 8000a6a:	2318      	movs	r3, #24
 8000a6c:	e012      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7 :
		return 28;
 8000a6e:	231c      	movs	r3, #28
 8000a70:	e010      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8 :
		return 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e00e      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9 :
		return 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	e00c      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10 :
		return 8;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	e00a      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11 :
		return 12;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	e008      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000a82:	2310      	movs	r3, #16
 8000a84:	e006      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13 :
		return 20;
 8000a86:	2314      	movs	r3, #20
 8000a88:	e004      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14 :
		return 24;
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	e002      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15 :
		return 28;
 8000a8e:	231c      	movs	r3, #28
 8000a90:	e000      	b.n	8000a94 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <MCAL_GPIO_Init>:
 * Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 *                    But LQFP48 Package has Only GPIO A,B, Part of C/D Exported as External Pins from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000a9e:	b590      	push	{r4, r7, lr}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) Configure Pins from 0 >> 7
	// Port configuration register low (GPIOx_CRL) Configure Pins from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	2bff      	cmp	r3, #255	; 0xff
 8000ab6:	d801      	bhi.n	8000abc <MCAL_GPIO_Init+0x1e>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	e001      	b.n	8000ac0 <MCAL_GPIO_Init+0x22>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3304      	adds	r3, #4
 8000ac0:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] , Mode[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff86 	bl	80009d8 <Get_CRLH_Position>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	43da      	mvns	r2, r3
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	401a      	ands	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	601a      	str	r2, [r3, #0]

	// if pin is Output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	789b      	ldrb	r3, [r3, #2]
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	d00b      	beq.n	8000b00 <MCAL_GPIO_Init+0x62>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	789b      	ldrb	r3, [r3, #2]
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d007      	beq.n	8000b00 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d003      	beq.n	8000b00 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	789b      	ldrb	r3, [r3, #2]
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d111      	bne.n	8000b24 <MCAL_GPIO_Init+0x86>
	{
		// Set CNF[1:0] , Mode[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) || (PinConfig->GPIO_Output_Speed)) & 0x0f );
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	3b04      	subs	r3, #4
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d103      	bne.n	8000b14 <MCAL_GPIO_Init+0x76>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	78db      	ldrb	r3, [r3, #3]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MCAL_GPIO_Init+0x7a>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <MCAL_GPIO_Init+0x7c>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	e02e      	b.n	8000b82 <MCAL_GPIO_Init+0xe4>
	}

	// if pin is Input
	else // MODE = 00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d003      	beq.n	8000b34 <MCAL_GPIO_Init+0x96>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	789b      	ldrb	r3, [r3, #2]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d109      	bne.n	8000b48 <MCAL_GPIO_Init+0xaa>
		{
			// Set CNF[1:0] , Mode[1:0]=00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) || 0x0) & 0x0f );
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf14      	ite	ne
 8000b3e:	2301      	movne	r3, #1
 8000b40:	2300      	moveq	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e01c      	b.n	8000b82 <MCAL_GPIO_Init+0xe4>
		}

		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Consider it as Input Floating
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	789b      	ldrb	r3, [r3, #2]
 8000b4c:	2b08      	cmp	r3, #8
 8000b4e:	d102      	bne.n	8000b56 <MCAL_GPIO_Init+0xb8>
		{
			// Set CNF[1:0] , Mode[1:0]=00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) || 0x0) & 0x0f );
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e015      	b.n	8000b82 <MCAL_GPIO_Init+0xe4>
		}

		else //PU  PD  Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) || 0x0) & 0x0f );
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	789b      	ldrb	r3, [r3, #2]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d107      	bne.n	8000b72 <MCAL_GPIO_Init+0xd4>
			{
				// PxODR = 1  Input Pull-up : table 20, port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;   // (1 << )
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	e007      	b.n	8000b82 <MCAL_GPIO_Init+0xe4>
			}
			else
			{
				// PxODR = 0  Input Pull-down : table 20, port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	8812      	ldrh	r2, [r2, #0]
 8000b7a:	43d2      	mvns	r2, r2
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60da      	str	r2, [r3, #12]



	}
	// Write on CRL or CRH
	(*ConfigRegister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000b82:	7bfc      	ldrb	r4, [r7, #15]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff25 	bl	80009d8 <Get_CRLH_Position>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	fa04 f203 	lsl.w	r2, r4, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd90      	pop	{r4, r7, pc}

08000ba6 <MCAL_GPIO_ReadPin>:
 * @retval 			-the Input Pin Value (two Values Based on) @ref GPIO_PIN_state
 * Note				-None
 * */

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;

	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e001      	b.n	8000bc8 <MCAL_GPIO_ReadPin+0x22>
	}

	else
	{
		bitstatus = GPIO_PIN_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <MCAL_GPIO_WritePin>:
 * @retval 			-None
 * Note				-None
 * */

void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t value)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
 8000be0:	4613      	mov	r3, r2
 8000be2:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET)
 8000be4:	787b      	ldrb	r3, [r7, #1]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <MCAL_GPIO_WritePin+0x1e>

		// Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
		// 0: No action on the corresponding ODRx bit
		// 1: Reset the corresponding ODRx bi
		GPIOx->BRR = (uint32_t)PinNumber;
	}

}
 8000bf0:	e002      	b.n	8000bf8 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	615a      	str	r2, [r3, #20]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <MCAL_GPIO_WritePort>:
 * @retval 			-None
 * Note				-None
 * */

void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx , uint16_t value)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value ;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
	...

08000c20 <__libc_init_array>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	2500      	movs	r5, #0
 8000c24:	4e0c      	ldr	r6, [pc, #48]	; (8000c58 <__libc_init_array+0x38>)
 8000c26:	4c0d      	ldr	r4, [pc, #52]	; (8000c5c <__libc_init_array+0x3c>)
 8000c28:	1ba4      	subs	r4, r4, r6
 8000c2a:	10a4      	asrs	r4, r4, #2
 8000c2c:	42a5      	cmp	r5, r4
 8000c2e:	d109      	bne.n	8000c44 <__libc_init_array+0x24>
 8000c30:	f000 f81a 	bl	8000c68 <_init>
 8000c34:	2500      	movs	r5, #0
 8000c36:	4e0a      	ldr	r6, [pc, #40]	; (8000c60 <__libc_init_array+0x40>)
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <__libc_init_array+0x44>)
 8000c3a:	1ba4      	subs	r4, r4, r6
 8000c3c:	10a4      	asrs	r4, r4, #2
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d105      	bne.n	8000c4e <__libc_init_array+0x2e>
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c48:	4798      	blx	r3
 8000c4a:	3501      	adds	r5, #1
 8000c4c:	e7ee      	b.n	8000c2c <__libc_init_array+0xc>
 8000c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c52:	4798      	blx	r3
 8000c54:	3501      	adds	r5, #1
 8000c56:	e7f2      	b.n	8000c3e <__libc_init_array+0x1e>
 8000c58:	08000cac 	.word	0x08000cac
 8000c5c:	08000cac 	.word	0x08000cac
 8000c60:	08000cac 	.word	0x08000cac
 8000c64:	08000cb0 	.word	0x08000cb0

08000c68 <_init>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	bf00      	nop
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr

08000c74 <_fini>:
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c76:	bf00      	nop
 8000c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7a:	bc08      	pop	{r3}
 8000c7c:	469e      	mov	lr, r3
 8000c7e:	4770      	bx	lr
