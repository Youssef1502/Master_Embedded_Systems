
Lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068f  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000570  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00000db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000303  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000148f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define  F_CPU 8000000UL  // Clock Configuration

int main(void)
{
	// PD0 AS OUTPUT PIN
	DDRD &= ~(1<<0);
  6c:	88 98       	cbi	0x11, 0	; 17
	// P4 , DPD5 , PD6 , PD7 AS OUTPUT PINS
	DDRD |= (0b1111<<4);
  6e:	81 b3       	in	r24, 0x11	; 17
  70:	80 6f       	ori	r24, 0xF0	; 240
  72:	81 bb       	out	0x11, r24	; 17

    while (1) 
    {
		if(((PIND & (1<<0))>>0) == 0)
		{
			PORTD = (0b0010<<4);
  74:	30 e2       	ldi	r19, 0x20	; 32
			_delay_ms(1000);
			PORTD = (0b0100<<4);
  76:	20 e4       	ldi	r18, 0x40	; 64
			_delay_ms(1000);
			PORTD = (0b1000<<4);
  78:	90 e8       	ldi	r25, 0x80	; 128
			_delay_ms(1000);
			PORTD = (0b0001<<4);
  7a:	80 e1       	ldi	r24, 0x10	; 16
	// P4 , DPD5 , PD6 , PD7 AS OUTPUT PINS
	DDRD |= (0b1111<<4);

    while (1) 
    {
		if(((PIND & (1<<0))>>0) == 0)
  7c:	80 99       	sbic	0x10, 0	; 16
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>
		{
			PORTD = (0b0010<<4);
  80:	32 bb       	out	0x12, r19	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	4f e3       	ldi	r20, 0x3F	; 63
  84:	5d e0       	ldi	r21, 0x0D	; 13
  86:	63 e0       	ldi	r22, 0x03	; 3
  88:	41 50       	subi	r20, 0x01	; 1
  8a:	50 40       	sbci	r21, 0x00	; 0
  8c:	60 40       	sbci	r22, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
			_delay_ms(1000);
			PORTD = (0b0100<<4);
  94:	22 bb       	out	0x12, r18	; 18
  96:	4f e3       	ldi	r20, 0x3F	; 63
  98:	5d e0       	ldi	r21, 0x0D	; 13
  9a:	63 e0       	ldi	r22, 0x03	; 3
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	50 40       	sbci	r21, 0x00	; 0
  a0:	60 40       	sbci	r22, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
			_delay_ms(1000);
			PORTD = (0b1000<<4);
  a8:	92 bb       	out	0x12, r25	; 18
  aa:	4f e3       	ldi	r20, 0x3F	; 63
  ac:	5d e0       	ldi	r21, 0x0D	; 13
  ae:	63 e0       	ldi	r22, 0x03	; 3
  b0:	41 50       	subi	r20, 0x01	; 1
  b2:	50 40       	sbci	r21, 0x00	; 0
  b4:	60 40       	sbci	r22, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
			_delay_ms(1000);
			PORTD = (0b0001<<4);
  bc:	82 bb       	out	0x12, r24	; 18
  be:	4f e7       	ldi	r20, 0x7F	; 127
  c0:	5a e1       	ldi	r21, 0x1A	; 26
  c2:	66 e0       	ldi	r22, 0x06	; 6
  c4:	41 50       	subi	r20, 0x01	; 1
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	60 40       	sbci	r22, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
			_delay_ms(2000);
			PORTD = (0b0000<<4);
  d0:	12 ba       	out	0x12, r1	; 18
  d2:	d4 cf       	rjmp	.-88     	; 0x7c <main+0x10>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
