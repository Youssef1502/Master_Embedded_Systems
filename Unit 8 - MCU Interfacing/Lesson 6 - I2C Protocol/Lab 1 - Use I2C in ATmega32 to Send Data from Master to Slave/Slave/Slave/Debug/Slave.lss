
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b6  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e1  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d3  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e7  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000035  00000000  00000000  0000136b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Set_Address>:

#include "I2C.h"

void I2C_Set_Address(unsigned char address)
{
	TWAR = address;
  6c:	82 b9       	out	0x02, r24	; 2
  6e:	08 95       	ret

00000070 <I2C_Read>:
}
unsigned char I2C_Read(unsigned char ack)
{
	unsigned char x=0;
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  70:	84 ec       	ldi	r24, 0xC4	; 196
  72:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 1<<7) == 0);
  74:	06 b6       	in	r0, 0x36	; 54
  76:	07 fe       	sbrs	r0, 7
  78:	fd cf       	rjmp	.-6      	; 0x74 <I2C_Read+0x4>
  7a:	01 c0       	rjmp	.+2      	; 0x7e <I2C_Read+0xe>
	while ((TWSR) != 0x60) x = TWSR;                // own SLA+W(0) has been transmitted and ACK has been returned
  7c:	81 b1       	in	r24, 0x01	; 1
  7e:	81 b1       	in	r24, 0x01	; 1
  80:	80 36       	cpi	r24, 0x60	; 96
  82:	e1 f7       	brne	.-8      	; 0x7c <I2C_Read+0xc>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);  
  84:	84 ec       	ldi	r24, 0xC4	; 196
  86:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 1<<7) == 0);
  88:	06 b6       	in	r0, 0x36	; 54
  8a:	07 fe       	sbrs	r0, 7
  8c:	fd cf       	rjmp	.-6      	; 0x88 <I2C_Read+0x18>
  8e:	01 c0       	rjmp	.+2      	; 0x92 <I2C_Read+0x22>
	while ((TWSR) != 0x80) x = TWSR;               // Data has been transmitted and ACK has been returned
  90:	81 b1       	in	r24, 0x01	; 1
  92:	81 b1       	in	r24, 0x01	; 1
  94:	80 38       	cpi	r24, 0x80	; 128
  96:	e1 f7       	brne	.-8      	; 0x90 <I2C_Read+0x20>
	return TWDR;
  98:	83 b1       	in	r24, 0x03	; 3
  9a:	08 95       	ret

0000009c <main>:
#include <avr/io.h>


int main(void)
{
   DDRA=0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a bb       	out	0x1a, r24	; 26
   I2C_Set_Address(0b11010000);         //Enable slave at address 01101000 and Don't accept general call
  a0:	80 ed       	ldi	r24, 0xD0	; 208
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Set_Address>
    while (1) 
    {
		PORTA = I2C_Read(1);             // Receive Byte and send ACK
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 38 00 	call	0x70	; 0x70 <I2C_Read>
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	fa cf       	rjmp	.-12     	; 0xa8 <main+0xc>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
