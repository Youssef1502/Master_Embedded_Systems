
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001050  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001180  08001180  00011180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a0  080011a0  000111a8  2**0
                  CONTENTS
  4 .ARM          00000000  080011a0  080011a0  000111a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a0  080011a8  000111a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a0  080011a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  080011a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080011a8  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d4a  00000000  00000000  000111d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001072  00000000  00000000  00017f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000134a  00000000  00000000  00018f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f0  00000000  00000000  0001a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0001a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002f15  00000000  00000000  0001a830  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003724  00000000  00000000  0001d745  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c205  00000000  00000000  00020e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d06e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009bc  00000000  00000000  0002d0ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001168 	.word	0x08001168

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001168 	.word	0x08001168

08000170 <EEPROM_Init>:


#include "EEPROM.h"

void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

	I2C_Config I2C_CFG;

	// I2C Controller ACT AS A  MASTER

	I2C_CFG.General_Call_Address_Detection = I2C_General_Call_Address_Enable;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	61bb      	str	r3, [r7, #24]
	I2C_CFG.I2C_ACK_Control = I2C_Ack_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	617b      	str	r3, [r7, #20]
	I2C_CFG.I2C_Clock_Speed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	603b      	str	r3, [r7, #0]
	I2C_CFG.I2C_Mode = I2C_mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60bb      	str	r3, [r7, #8]
	I2C_CFG.Stretch_Mode = I2C_Stretch_Mode_Enable;
 8000188:	2300      	movs	r3, #0
 800018a:	607b      	str	r3, [r7, #4]
	I2C_CFG.P_Slave_Event_CallBack = NULL;
 800018c:	2300      	movs	r3, #0
 800018e:	61fb      	str	r3, [r7, #28]


	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 fc03 	bl	800099c <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_CFG);
 8000196:	463b      	mov	r3, r7
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 faf6 	bl	800078c <MCAL_I2C_Init>

}
 80001a0:	bf00      	nop
 80001a2:	3720      	adds	r7, #32
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_NBytes>:



unsigned char EEPROM_Write_NBytes(unsigned int Memory_address , unsigned char *bytes , uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_address>>8);   // Upper Byte Memory Address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_address);		// Lower Byte Memory Address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for( i =2 ; i<(Data_Length+2) ; i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <EEPROM_Write_NBytes+0x66>
	{
		buffer[i]= bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for( i =2 ; i<(Data_Length+2) ; i++)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, (Data_Length+2), WithStop, Start);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <EEPROM_Write_NBytes+0xa0>)
 800023e:	f000 fbf1 	bl	8000a24 <MCAL_I2C_Master_TX>

	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <EEPROM_Read_Byte>:



unsigned char EEPROM_Read_Byte(unsigned int address, unsigned char *dataOut, uint8_t dataLen)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]

	uint8_t i=0;
 8000262:	2300      	movs	r3, #0
 8000264:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[2];
	buffer[0] = (uint8_t)(address>>8);   // upper Byte Memory Address
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	0a1b      	lsrs	r3, r3, #8
 800026a:	b2db      	uxtb	r3, r3
 800026c:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(address);		 // Lower Byte Memory Address
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	b2db      	uxtb	r3, r3
 8000272:	757b      	strb	r3, [r7, #21]

	// Write Address Only
	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, 2, WithoutStop, Start);
 8000274:	f107 0214 	add.w	r2, r7, #20
 8000278:	2300      	movs	r3, #0
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	2301      	movs	r3, #1
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2302      	movs	r3, #2
 8000282:	212a      	movs	r1, #42	; 0x2a
 8000284:	4809      	ldr	r0, [pc, #36]	; (80002ac <EEPROM_Read_Byte+0x58>)
 8000286:	f000 fbcd 	bl	8000a24 <MCAL_I2C_Master_TX>
	// Read Data with Repeat Start
	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, dataOut, dataLen, WithStop, RepeatedSart);
 800028a:	79fa      	ldrb	r2, [r7, #7]
 800028c:	2301      	movs	r3, #1
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2300      	movs	r3, #0
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	68ba      	ldr	r2, [r7, #8]
 8000298:	212a      	movs	r1, #42	; 0x2a
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <EEPROM_Read_Byte+0x58>)
 800029c:	f000 fc20 	bl	8000ae0 <MCAL_I2C_Master_RX>

	return 0;
 80002a0:	2300      	movs	r3, #0

}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40005400 	.word	0x40005400

080002b0 <clock_init>:
#include "STM32F103X6.h"
#include "EEPROM.h"


void clock_init()
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	//Enable CLock
	RCC_GPIOA_CLK_EN();
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <clock_init+0x24>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <clock_init+0x24>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <clock_init+0x24>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <clock_init+0x24>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	6193      	str	r3, [r2, #24]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <main>:


int main()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	clock_init();
 80002de:	f7ff ffe7 	bl	80002b0 <clock_init>

	//Test case 1
	uint8_t ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80002e2:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <main+0x78>)
 80002e4:	f107 0308 	add.w	r3, r7, #8
 80002e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ec:	6018      	str	r0, [r3, #0]
 80002ee:	3304      	adds	r3, #4
 80002f0:	8019      	strh	r1, [r3, #0]
 80002f2:	3302      	adds	r3, #2
 80002f4:	0c0a      	lsrs	r2, r1, #16
 80002f6:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7]= {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 8000302:	f7ff ff35 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	2207      	movs	r2, #7
 800030c:	4619      	mov	r1, r3
 800030e:	20af      	movs	r0, #175	; 0xaf
 8000310:	f7ff ff4e 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xAF, ch2, 7);
 8000314:	463b      	mov	r3, r7
 8000316:	2207      	movs	r2, #7
 8000318:	4619      	mov	r1, r3
 800031a:	20af      	movs	r0, #175	; 0xaf
 800031c:	f7ff ff9a 	bl	8000254 <EEPROM_Read_Byte>


	//Test case 2
	ch1[0] = 0xA;
 8000320:	230a      	movs	r3, #10
 8000322:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000324:	230b      	movs	r3, #11
 8000326:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000328:	230c      	movs	r3, #12
 800032a:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 800032c:	230d      	movs	r3, #13
 800032e:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	2204      	movs	r2, #4
 8000336:	4619      	mov	r1, r3
 8000338:	f640 70ff 	movw	r0, #4095	; 0xfff
 800033c:	f7ff ff38 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xFFF, ch2, 4);
 8000340:	463b      	mov	r3, r7
 8000342:	2204      	movs	r2, #4
 8000344:	4619      	mov	r1, r3
 8000346:	f640 70ff 	movw	r0, #4095	; 0xfff
 800034a:	f7ff ff83 	bl	8000254 <EEPROM_Read_Byte>

	while(1)
 800034e:	e7fe      	b.n	800034e <main+0x76>
 8000350:	08001180 	.word	0x08001180

08000354 <Reset_Handler>:
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
 8000356:	4685      	mov	sp, r0
 8000358:	f3af 8000 	nop.w
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
 8000362:	2300      	movs	r3, #0
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:
 8000366:	58d4      	ldr	r4, [r2, r3]
 8000368:	50c4      	str	r4, [r0, r3]
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:
 800036c:	18c4      	adds	r4, r0, r3
 800036e:	428c      	cmp	r4, r1
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
 8000376:	2300      	movs	r3, #0
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:
 800037a:	6013      	str	r3, [r2, #0]
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:
 800037e:	42a2      	cmp	r2, r4
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>
 8000382:	f000 fecd 	bl	8001120 <__libc_init_array>
 8000386:	f7ff ffa7 	bl	80002d8 <main>

0800038a <LoopForever>:
 800038a:	e7fe      	b.n	800038a <LoopForever>
 800038c:	20002800 	.word	0x20002800
 8000390:	20000000 	.word	0x20000000
 8000394:	20000000 	.word	0x20000000
 8000398:	080011a8 	.word	0x080011a8
 800039c:	20000000 	.word	0x20000000
 80003a0:	200000a4 	.word	0x200000a4

080003a4 <ADC1_2_IRQHandler>:
 80003a4:	e7fe      	b.n	80003a4 <ADC1_2_IRQHandler>
	...

080003a8 <EXTI0_IRQHandler>:
					ISR FUNCTIONS
//**==================================================
//**===============================================**/

void EXTI0_IRQHandler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <EXTI0_IRQHandler+0x1c>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <EXTI0_IRQHandler+0x1c>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <EXTI0_IRQHandler+0x20>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4798      	blx	r3
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40010400 	.word	0x40010400
 80003c8:	20000068 	.word	0x20000068

080003cc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<1);
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <EXTI1_IRQHandler+0x1c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <EXTI1_IRQHandler+0x1c>)
 80003d6:	f043 0302 	orr.w	r3, r3, #2
 80003da:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[1]();
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <EXTI1_IRQHandler+0x20>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4798      	blx	r3
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40010400 	.word	0x40010400
 80003ec:	20000068 	.word	0x20000068

080003f0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<2);
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <EXTI2_IRQHandler+0x1c>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <EXTI2_IRQHandler+0x1c>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[2]();
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <EXTI2_IRQHandler+0x20>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4798      	blx	r3
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010400 	.word	0x40010400
 8000410:	20000068 	.word	0x20000068

08000414 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<3);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <EXTI3_IRQHandler+0x1c>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <EXTI3_IRQHandler+0x1c>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[3]();
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <EXTI3_IRQHandler+0x20>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	4798      	blx	r3
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010400 	.word	0x40010400
 8000434:	20000068 	.word	0x20000068

08000438 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<4);
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <EXTI4_IRQHandler+0x1c>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <EXTI4_IRQHandler+0x1c>)
 8000442:	f043 0310 	orr.w	r3, r3, #16
 8000446:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[4]();
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <EXTI4_IRQHandler+0x20>)
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	4798      	blx	r3
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40010400 	.word	0x40010400
 8000458:	20000068 	.word	0x20000068

0800045c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { EXTI->PR |= (1<<5) ;   GP_IRQ_CallBack[5]();  }
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f003 0320 	and.w	r3, r3, #32
 8000468:	2b00      	cmp	r3, #0
 800046a:	d008      	beq.n	800047e <EXTI9_5_IRQHandler+0x22>
 800046c:	4b23      	ldr	r3, [pc, #140]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a22      	ldr	r2, [pc, #136]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6153      	str	r3, [r2, #20]
 8000478:	4b21      	ldr	r3, [pc, #132]	; (8000500 <EXTI9_5_IRQHandler+0xa4>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) { EXTI->PR |= (1<<6) ;   GP_IRQ_CallBack[6]();  }
 800047e:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000486:	2b00      	cmp	r3, #0
 8000488:	d008      	beq.n	800049c <EXTI9_5_IRQHandler+0x40>
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a1b      	ldr	r2, [pc, #108]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 8000490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <EXTI9_5_IRQHandler+0xa4>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) { EXTI->PR |= (1<<7) ;   GP_IRQ_CallBack[7]();  }
 800049c:	4b17      	ldr	r3, [pc, #92]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d008      	beq.n	80004ba <EXTI9_5_IRQHandler+0x5e>
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a13      	ldr	r2, [pc, #76]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 80004ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <EXTI9_5_IRQHandler+0xa4>)
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) { EXTI->PR |= (1<<8) ;   GP_IRQ_CallBack[8]();  }
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d008      	beq.n	80004d8 <EXTI9_5_IRQHandler+0x7c>
 80004c6:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a0c      	ldr	r2, [pc, #48]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 80004cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <EXTI9_5_IRQHandler+0xa4>)
 80004d4:	6a1b      	ldr	r3, [r3, #32]
 80004d6:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) { EXTI->PR |= (1<<9) ;   GP_IRQ_CallBack[9]();  }
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d008      	beq.n	80004f6 <EXTI9_5_IRQHandler+0x9a>
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <EXTI9_5_IRQHandler+0xa0>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6153      	str	r3, [r2, #20]
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <EXTI9_5_IRQHandler+0xa4>)
 80004f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f4:	4798      	blx	r3
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40010400 	.word	0x40010400
 8000500:	20000068 	.word	0x20000068

08000504 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { EXTI->PR |= (1<<10) ;   GP_IRQ_CallBack[10]();  }
 8000508:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000510:	2b00      	cmp	r3, #0
 8000512:	d008      	beq.n	8000526 <EXTI15_10_IRQHandler+0x22>
 8000514:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	4a29      	ldr	r2, [pc, #164]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6153      	str	r3, [r2, #20]
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <EXTI15_10_IRQHandler+0xc0>)
 8000522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000524:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) { EXTI->PR |= (1<<11) ;   GP_IRQ_CallBack[11]();  }
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800052e:	2b00      	cmp	r3, #0
 8000530:	d008      	beq.n	8000544 <EXTI15_10_IRQHandler+0x40>
 8000532:	4b23      	ldr	r3, [pc, #140]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a22      	ldr	r2, [pc, #136]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <EXTI15_10_IRQHandler+0xc0>)
 8000540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000542:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) { EXTI->PR |= (1<<12) ;   GP_IRQ_CallBack[12]();  }
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800054c:	2b00      	cmp	r3, #0
 800054e:	d008      	beq.n	8000562 <EXTI15_10_IRQHandler+0x5e>
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000556:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800055a:	6153      	str	r3, [r2, #20]
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <EXTI15_10_IRQHandler+0xc0>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) { EXTI->PR |= (1<<13) ;   GP_IRQ_CallBack[13]();  }
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d008      	beq.n	8000580 <EXTI15_10_IRQHandler+0x7c>
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <EXTI15_10_IRQHandler+0xc0>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) { EXTI->PR |= (1<<14) ;   GP_IRQ_CallBack[14]();  }
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	2b00      	cmp	r3, #0
 800058a:	d008      	beq.n	800059e <EXTI15_10_IRQHandler+0x9a>
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6153      	str	r3, [r2, #20]
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <EXTI15_10_IRQHandler+0xc0>)
 800059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059c:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) { EXTI->PR |= (1<<15) ;   GP_IRQ_CallBack[15]();  }
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d008      	beq.n	80005bc <EXTI15_10_IRQHandler+0xb8>
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <EXTI15_10_IRQHandler+0xbc>)
 80005b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <EXTI15_10_IRQHandler+0xc0>)
 80005b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ba:	4798      	blx	r3
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40010400 	.word	0x40010400
 80005c4:	20000068 	.word	0x20000068

080005c8 <Get_CRLH_Position>:
 *                            Generic Functions
 * ========================================================================
 */

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	2b80      	cmp	r3, #128	; 0x80
 80005d6:	d042      	beq.n	800065e <Get_CRLH_Position+0x96>
 80005d8:	2b80      	cmp	r3, #128	; 0x80
 80005da:	dc11      	bgt.n	8000600 <Get_CRLH_Position+0x38>
 80005dc:	2b08      	cmp	r3, #8
 80005de:	d036      	beq.n	800064e <Get_CRLH_Position+0x86>
 80005e0:	2b08      	cmp	r3, #8
 80005e2:	dc06      	bgt.n	80005f2 <Get_CRLH_Position+0x2a>
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d02e      	beq.n	8000646 <Get_CRLH_Position+0x7e>
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d02e      	beq.n	800064a <Get_CRLH_Position+0x82>
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d028      	beq.n	8000642 <Get_CRLH_Position+0x7a>
 80005f0:	e047      	b.n	8000682 <Get_CRLH_Position+0xba>
 80005f2:	2b20      	cmp	r3, #32
 80005f4:	d02f      	beq.n	8000656 <Get_CRLH_Position+0x8e>
 80005f6:	2b40      	cmp	r3, #64	; 0x40
 80005f8:	d02f      	beq.n	800065a <Get_CRLH_Position+0x92>
 80005fa:	2b10      	cmp	r3, #16
 80005fc:	d029      	beq.n	8000652 <Get_CRLH_Position+0x8a>
 80005fe:	e040      	b.n	8000682 <Get_CRLH_Position+0xba>
 8000600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000604:	d033      	beq.n	800066e <Get_CRLH_Position+0xa6>
 8000606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800060a:	dc09      	bgt.n	8000620 <Get_CRLH_Position+0x58>
 800060c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000610:	d029      	beq.n	8000666 <Get_CRLH_Position+0x9e>
 8000612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000616:	d028      	beq.n	800066a <Get_CRLH_Position+0xa2>
 8000618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800061c:	d021      	beq.n	8000662 <Get_CRLH_Position+0x9a>
 800061e:	e030      	b.n	8000682 <Get_CRLH_Position+0xba>
 8000620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000624:	d027      	beq.n	8000676 <Get_CRLH_Position+0xae>
 8000626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062a:	dc03      	bgt.n	8000634 <Get_CRLH_Position+0x6c>
 800062c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000630:	d01f      	beq.n	8000672 <Get_CRLH_Position+0xaa>
 8000632:	e026      	b.n	8000682 <Get_CRLH_Position+0xba>
 8000634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000638:	d01f      	beq.n	800067a <Get_CRLH_Position+0xb2>
 800063a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800063e:	d01e      	beq.n	800067e <Get_CRLH_Position+0xb6>
 8000640:	e01f      	b.n	8000682 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 8000642:	2300      	movs	r3, #0
 8000644:	e01e      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1 :
		return 4;
 8000646:	2304      	movs	r3, #4
 8000648:	e01c      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2 :
		return 8;
 800064a:	2308      	movs	r3, #8
 800064c:	e01a      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3 :
		return 12;
 800064e:	230c      	movs	r3, #12
 8000650:	e018      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000652:	2310      	movs	r3, #16
 8000654:	e016      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5 :
		return 20;
 8000656:	2314      	movs	r3, #20
 8000658:	e014      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6 :
		return 24;
 800065a:	2318      	movs	r3, #24
 800065c:	e012      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7 :
		return 28;
 800065e:	231c      	movs	r3, #28
 8000660:	e010      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8 :
		return 0;
 8000662:	2300      	movs	r3, #0
 8000664:	e00e      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9 :
		return 4;
 8000666:	2304      	movs	r3, #4
 8000668:	e00c      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10 :
		return 8;
 800066a:	2308      	movs	r3, #8
 800066c:	e00a      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11 :
		return 12;
 800066e:	230c      	movs	r3, #12
 8000670:	e008      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000672:	2310      	movs	r3, #16
 8000674:	e006      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13 :
		return 20;
 8000676:	2314      	movs	r3, #20
 8000678:	e004      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14 :
		return 24;
 800067a:	2318      	movs	r3, #24
 800067c:	e002      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15 :
		return 28;
 800067e:	231c      	movs	r3, #28
 8000680:	e000      	b.n	8000684 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <MCAL_GPIO_Init>:
 * Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 *                    But LQFP48 Package has Only GPIO A,B, Part of C/D Exported as External Pins from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 800068e:	b590      	push	{r4, r7, lr}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) Configure Pins from 0 >> 7
	// Port configuration register low (GPIOx_CRL) Configure Pins from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2bff      	cmp	r3, #255	; 0xff
 80006a6:	d801      	bhi.n	80006ac <MCAL_GPIO_Init+0x1e>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	e001      	b.n	80006b0 <MCAL_GPIO_Init+0x22>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3304      	adds	r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] , Mode[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff86 	bl	80005c8 <Get_CRLH_Position>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	230f      	movs	r3, #15
 80006c2:	4093      	lsls	r3, r2
 80006c4:	43da      	mvns	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	401a      	ands	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	601a      	str	r2, [r3, #0]

	// if pin is Output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	d00b      	beq.n	80006f0 <MCAL_GPIO_Init+0x62>
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	2b06      	cmp	r3, #6
 80006de:	d007      	beq.n	80006f0 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 80006e4:	2b05      	cmp	r3, #5
 80006e6:	d003      	beq.n	80006f0 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d10e      	bne.n	800070e <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] , Mode[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f );
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	789b      	ldrb	r3, [r3, #2]
 80006f4:	3b04      	subs	r3, #4
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	78db      	ldrb	r3, [r3, #3]
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	73fb      	strb	r3, [r7, #15]
 800070c:	e02c      	b.n	8000768 <MCAL_GPIO_Init+0xda>
	}

	// if pin is Input
	else // MODE = 00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <MCAL_GPIO_Init+0x90>
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	789b      	ldrb	r3, [r3, #2]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d107      	bne.n	800072e <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] , Mode[1:0]=00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0f );
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	789b      	ldrb	r3, [r3, #2]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	e01c      	b.n	8000768 <MCAL_GPIO_Init+0xda>
		}

		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Consider it as Input Floating
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	789b      	ldrb	r3, [r3, #2]
 8000732:	2b08      	cmp	r3, #8
 8000734:	d102      	bne.n	800073c <MCAL_GPIO_Init+0xae>
		{
			// Set CNF[1:0] , Mode[1:0]=00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0f );
 8000736:	2304      	movs	r3, #4
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	e015      	b.n	8000768 <MCAL_GPIO_Init+0xda>
		}

		else //PU  PD  Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f );
 800073c:	2308      	movs	r3, #8
 800073e:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	789b      	ldrb	r3, [r3, #2]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d107      	bne.n	8000758 <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1  Input Pull-up : table 20, port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;   // (1 << )
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	8812      	ldrh	r2, [r2, #0]
 8000750:	431a      	orrs	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	e007      	b.n	8000768 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0  Input Pull-down : table 20, port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	8812      	ldrh	r2, [r2, #0]
 8000760:	43d2      	mvns	r2, r2
 8000762:	401a      	ands	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	60da      	str	r2, [r3, #12]



	}
	// Write on CRL or CRH
	(*ConfigRegister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000768:	7bfc      	ldrb	r4, [r7, #15]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff2a 	bl	80005c8 <Get_CRLH_Position>
 8000774:	4603      	mov	r3, r0
 8000776:	fa04 f203 	lsl.w	r2, r4, r3
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <MCAL_I2C_Init>:
* Note					- Support for I2C Master Send/Receive Only
*/
/**================================================================*/

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_Config* I2C_Init_Struct)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	uint16_t TempReg = 0 , FreqReg = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	82fb      	strh	r3, [r7, #22]
 800079a:	2300      	movs	r3, #0
 800079c:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 800079e:	4b77      	ldr	r3, [pc, #476]	; (800097c <MCAL_I2C_Init+0x1f0>)
 80007a0:	613b      	str	r3, [r7, #16]
	uint16_t result = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	81fb      	strh	r3, [r7, #14]

	//Enable RCC Clock
	if(I2Cx == I2C1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a75      	ldr	r2, [pc, #468]	; (8000980 <MCAL_I2C_Init+0x1f4>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d110      	bne.n	80007d0 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_Index] = *I2C_Init_Struct;
 80007ae:	4a75      	ldr	r2, [pc, #468]	; (8000984 <MCAL_I2C_Init+0x1f8>)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	4614      	mov	r4, r2
 80007b4:	461d      	mov	r5, r3
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C1_CLK_EN();
 80007c2:	4b71      	ldr	r3, [pc, #452]	; (8000988 <MCAL_I2C_Init+0x1fc>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a70      	ldr	r2, [pc, #448]	; (8000988 <MCAL_I2C_Init+0x1fc>)
 80007c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	e010      	b.n	80007f2 <MCAL_I2C_Init+0x66>

	}

	else
	{
		Global_I2C_Config[I2C2_Index] = *I2C_Init_Struct;
 80007d0:	4b6c      	ldr	r3, [pc, #432]	; (8000984 <MCAL_I2C_Init+0x1f8>)
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	f103 0420 	add.w	r4, r3, #32
 80007d8:	4615      	mov	r5, r2
 80007da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C2_CLK_EN();
 80007e6:	4b68      	ldr	r3, [pc, #416]	; (8000988 <MCAL_I2C_Init+0x1fc>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	4a67      	ldr	r2, [pc, #412]	; (8000988 <MCAL_I2C_Init+0x1fc>)
 80007ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f0:	61d3      	str	r3, [r2, #28]

	}


	// check on I2C Mode
	if(I2C_Init_Struct->I2C_Mode == I2C_mode_I2C)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f040 8088 	bne.w	800090c <MCAL_I2C_Init+0x180>
	{
		/*------------------  INIT Timing  -------------------*/

		//Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		TempReg = I2Cx->CR2;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	82fb      	strh	r3, [r7, #22]
		// Clear Frequency FREQ[5:0] bits
		TempReg &= ~(I2C_CR2_FREQ);
 8000802:	8afb      	ldrh	r3, [r7, #22]
 8000804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000808:	82fb      	strh	r3, [r7, #22]
		// Get pclk Frequency Value
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 800080a:	f000 fbfb 	bl	8001004 <MCAL_RCC_GetPCLK1Freq>
 800080e:	6138      	str	r0, [r7, #16]
		// Set Frequency bits depend on pclk1 value
		FreqReg = (uint16_t)(pclk1 / 1000000);
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	4a5e      	ldr	r2, [pc, #376]	; (800098c <MCAL_I2C_Init+0x200>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	0c9b      	lsrs	r3, r3, #18
 800081a:	82bb      	strh	r3, [r7, #20]
		TempReg |= FreqReg;
 800081c:	8afa      	ldrh	r2, [r7, #22]
 800081e:	8abb      	ldrh	r3, [r7, #20]
 8000820:	4313      	orrs	r3, r2
 8000822:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR2 = TempReg ;
 8000824:	8afa      	ldrh	r2, [r7, #22]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	605a      	str	r2, [r3, #4]

		// Configure the rise time register
		/* disable the selected I2C peripheral to configure time */
		I2Cx->CR1 &=~(I2C_CR1_PE);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f023 0201 	bic.w	r2, r3, #1
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]

		TempReg =0;
 8000836:	2300      	movs	r3, #0
 8000838:	82fb      	strh	r3, [r7, #22]

		/*---------------  Configure Speed in Standard mode  --------------------*/

		if(I2C_Init_Struct->I2C_Clock_Speed == I2C_SCLK_SM_50K || I2C_Init_Struct->I2C_Clock_Speed == I2C_SCLK_SM_100K)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000842:	4293      	cmp	r3, r2
 8000844:	d004      	beq.n	8000850 <MCAL_I2C_Init+0xc4>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a51      	ldr	r2, [pc, #324]	; (8000990 <MCAL_I2C_Init+0x204>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d119      	bne.n	8000884 <MCAL_I2C_Init+0xf8>
		{
			// Tclk/2 = CRR * Tpclk1
			// CCR = Tclk / (2 * Tpclk1)
			// CRR = Fpclk1 / (2 * I2C_Clock_freq )

			result = (uint16_t)(pclk1 /( I2C_Init_Struct->I2C_Clock_Speed<<1 ));  // ( << 1 ) = * 2
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	fbb2 f3f3 	udiv	r3, r2, r3
 800085c:	81fb      	strh	r3, [r7, #14]
			TempReg |= result;
 800085e:	8afa      	ldrh	r2, [r7, #22]
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	4313      	orrs	r3, r2
 8000864:	82fb      	strh	r3, [r7, #22]

			/*Write to CRR*/
			I2Cx->CCR = TempReg;
 8000866:	8afa      	ldrh	r2, [r7, #22]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	61da      	str	r2, [r3, #28]

			TempReg = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	82fb      	strh	r3, [r7, #22]

			/*--------------------------  Configure Rise time register  --------------*/
			//	Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
			result = (uint16_t)(FreqReg )+1;
 8000870:	8abb      	ldrh	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	81fb      	strh	r3, [r7, #14]
			TempReg |= result;
 8000876:	8afa      	ldrh	r2, [r7, #22]
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	4313      	orrs	r3, r2
 800087c:	82fb      	strh	r3, [r7, #22]
			/*Write to I2Cx->TRISE*/
			I2Cx->TRISE = TempReg;
 800087e:	8afa      	ldrh	r2, [r7, #22]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	621a      	str	r2, [r3, #32]
		}



	/* Program the I2C_CR1 register to enable the peripheral*/
		TempReg = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	82fb      	strh	r3, [r7, #22]
		TempReg = I2Cx->CR1;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	82fb      	strh	r3, [r7, #22]

		TempReg |=(uint16_t) ((I2C_Init_Struct->I2C_ACK_Control) | (I2C_Init_Struct->General_Call_Address_Detection) | (I2C_Init_Struct->I2C_Mode) | (I2C_Init_Struct->Stretch_Mode));
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	b29a      	uxth	r2, r3
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	b29b      	uxth	r3, r3
 800089a:	4313      	orrs	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	8afb      	ldrh	r3, [r7, #22]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	82fb      	strh	r3, [r7, #22]

		/*Write to I2Cx->CR1*/
		I2Cx->CR1 = TempReg;
 80008b8:	8afa      	ldrh	r2, [r7, #22]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]

		/* Program the I2C_OAR1 & I2C_OAR2 Registers */
		TempReg=0;
 80008be:	2300      	movs	r3, #0
 80008c0:	82fb      	strh	r3, [r7, #22]
		if(I2C_Init_Struct->S_I2C_Slave_Address.Enable_Dual_ADD == 1)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	899b      	ldrh	r3, [r3, #12]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d10d      	bne.n	80008e6 <MCAL_I2C_Init+0x15a>
		{
			TempReg = I2C_OAR2_ENDUAL;
 80008ca:	2301      	movs	r3, #1
 80008cc:	82fb      	strh	r3, [r7, #22]
			TempReg |= I2C_Init_Struct->S_I2C_Slave_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos ;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	8a1b      	ldrh	r3, [r3, #16]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21b      	sxth	r3, r3
 80008de:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = TempReg;
 80008e0:	8afa      	ldrh	r2, [r7, #22]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60da      	str	r2, [r3, #12]
		}
		TempReg=0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	82fb      	strh	r3, [r7, #22]
		TempReg |= I2C_Init_Struct->S_I2C_Slave_Address.Primary_Slave_Address << 1;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	89db      	ldrh	r3, [r3, #14]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	82fb      	strh	r3, [r7, #22]
		TempReg |= I2C_Init_Struct->S_I2C_Slave_Address.I2C_Addressing_Slave_Mode;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	8a5a      	ldrh	r2, [r3, #18]
 8000900:	8afb      	ldrh	r3, [r7, #22]
 8000902:	4313      	orrs	r3, r2
 8000904:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = TempReg;
 8000906:	8afa      	ldrh	r2, [r7, #22]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	609a      	str	r2, [r3, #8]

	// interrupt Mode (Slave Mode )
	// Check callback pointer != NULL
	// We are not using slave mode here but we are configured his interrupts just for knowledge

	if(I2C_Init_Struct->P_Slave_Event_CallBack != NULL)	// then Enable Slave IRQ State Mode
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d028      	beq.n	8000966 <MCAL_I2C_Init+0x1da>
	{
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN) | (I2C_CR2_ITERREN) | (I2C_CR2_ITEVTEN);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <MCAL_I2C_Init+0x1f4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d10c      	bne.n	8000942 <MCAL_I2C_Init+0x1b6>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MCAL_I2C_Init+0x208>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <MCAL_I2C_Init+0x208>)
 800092e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000932:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MCAL_I2C_Init+0x20c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a17      	ldr	r2, [pc, #92]	; (8000998 <MCAL_I2C_Init+0x20c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	e00b      	b.n	800095a <MCAL_I2C_Init+0x1ce>
		}

		else
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MCAL_I2C_Init+0x20c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <MCAL_I2C_Init+0x20c>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MCAL_I2C_Init+0x20c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <MCAL_I2C_Init+0x20c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6013      	str	r3, [r2, #0]
		}

		I2Cx->SR1 = 0;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]

	}


	/* Enable the Selected I2C Peripheral */
	I2Cx->CR1 |= I2C_CR1_PE;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f043 0201 	orr.w	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]

}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}
 800097a:	bf00      	nop
 800097c:	007a1200 	.word	0x007a1200
 8000980:	40005400 	.word	0x40005400
 8000984:	2000001c 	.word	0x2000001c
 8000988:	40021000 	.word	0x40021000
 800098c:	431bde83 	.word	0x431bde83
 8000990:	000186a0 	.word	0x000186a0
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000e104 	.word	0xe000e104

0800099c <MCAL_I2C_GPIO_Set_Pins>:
* Note					- None
*/
/**================================================================*/

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCnfg;

	// I2Cx_SCL [ Alternate function open drain ]
	// I2Cx_SDA [ Alternate function open drain ]

	if(I2Cx == I2C1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <MCAL_I2C_GPIO_Set_Pins+0x80>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d118      	bne.n	80009de <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6 :SCL
		// PB7 :SDA
		pinCnfg.GPIO_PinNumber =GPIO_PIN_6;
 80009ac:	2340      	movs	r3, #64	; 0x40
 80009ae:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80009b0:	2307      	movs	r3, #7
 80009b2:	73bb      	strb	r3, [r7, #14]
		pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCnfg);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80009c0:	f7ff fe65 	bl	800068e <MCAL_GPIO_Init>

		pinCnfg.GPIO_PinNumber =GPIO_PIN_7;
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80009c8:	2307      	movs	r3, #7
 80009ca:	73bb      	strb	r3, [r7, #14]
		pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCnfg);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4812      	ldr	r0, [pc, #72]	; (8000a20 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80009d8:	f7ff fe59 	bl	800068e <MCAL_GPIO_Init>
		pinCnfg.GPIO_PinNumber =GPIO_PIN_11;
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
		pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &pinCnfg);
	}
}
 80009dc:	e019      	b.n	8000a12 <MCAL_I2C_GPIO_Set_Pins+0x76>
		pinCnfg.GPIO_PinNumber =GPIO_PIN_10;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80009e4:	2307      	movs	r3, #7
 80009e6:	73bb      	strb	r3, [r7, #14]
		pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCnfg);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80009f4:	f7ff fe4b 	bl	800068e <MCAL_GPIO_Init>
		pinCnfg.GPIO_PinNumber =GPIO_PIN_11;
 80009f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fc:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80009fe:	2307      	movs	r3, #7
 8000a00:	73bb      	strb	r3, [r7, #14]
		pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCnfg);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 8000a0e:	f7ff fe3e 	bl	800068e <MCAL_GPIO_Init>
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <MCAL_I2C_Master_TX>:
* Note					- We will use Master Polling Mechanism
*/
/**================================================================*/

void MCAL_I2C_Master_TX(I2C_TypeDef *I2Cx , uint16_t devAdd,uint8_t* dataOut, uint32_t dataLen , Stop_Condition Stop , Repeated_Start start)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	460b      	mov	r3, r1
 8000a32:	817b      	strh	r3, [r7, #10]
	int i =0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
	// to do support timeout configure timer for specific duration rise interrupt
	// timer interrupt() { flag=0 }
	// so any code exist in while (check flag && any polling condition)

	// 1. Set the START bit in I2C_CR1 register to generate start Condition
	I2C_GenerateStar(I2Cx , ENABLE,  start);
 8000a38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2101      	movs	r1, #1
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f000 f8bd 	bl	8000bc0 <I2C_GenerateStar>

	// 2.Wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while( !(I2C_GetFlagStatus( I2Cx, EV5)));
 8000a46:	bf00      	nop
 8000a48:	2101      	movs	r1, #1
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f000 f8e0 	bl	8000c10 <I2C_GetFlagStatus>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f8      	beq.n	8000a48 <MCAL_I2C_Master_TX+0x24>

	// 3- Send Address
	I2C_SendAddress( I2Cx,  devAdd , I2C_Direction_Transmitter);
 8000a56:	897b      	ldrh	r3, [r7, #10]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f000 f95f 	bl	8000d20 <I2C_SendAddress>

	// 4.Wait for EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while( !(I2C_GetFlagStatus( I2Cx, EV6)));
 8000a62:	bf00      	nop
 8000a64:	2102      	movs	r1, #2
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f8d2 	bl	8000c10 <I2C_GetFlagStatus>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f8      	beq.n	8000a64 <MCAL_I2C_Master_TX+0x40>

	// 5. Check on [ Busy / MSL / TXE / TRA ] flags
	while( !(I2C_GetFlagStatus( I2Cx, MASTER_BYTE_TRANSMITING)));
 8000a72:	bf00      	nop
 8000a74:	4919      	ldr	r1, [pc, #100]	; (8000adc <MCAL_I2C_Master_TX+0xb8>)
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f000 f8ca 	bl	8000c10 <I2C_GetFlagStatus>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f8      	beq.n	8000a74 <MCAL_I2C_Master_TX+0x50>

	for( i= 0; i< dataLen ; ++i)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e011      	b.n	8000aac <MCAL_I2C_Master_TX+0x88>
	{
		I2Cx->DR = dataOut[i];
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	611a      	str	r2, [r3, #16]

		// 6.Wait EV8
		// EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while( !(I2C_GetFlagStatus( I2Cx, EV8)));
 8000a96:	bf00      	nop
 8000a98:	2103      	movs	r1, #3
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f000 f8b8 	bl	8000c10 <I2C_GetFlagStatus>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f8      	beq.n	8000a98 <MCAL_I2C_Master_TX+0x74>
	for( i= 0; i< dataLen ; ++i)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8e9      	bhi.n	8000a88 <MCAL_I2C_Master_TX+0x64>
	}

	// 7.wait for EV8_2
	// EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	while( !(I2C_GetFlagStatus( I2Cx, EV8_2)));
 8000ab4:	bf00      	nop
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f8a9 	bl	8000c10 <I2C_GetFlagStatus>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f8      	beq.n	8000ab6 <MCAL_I2C_Master_TX+0x92>

	if(Stop == WithStop)
 8000ac4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <MCAL_I2C_Master_TX+0xb0>
	{
		// Send Stop Condition
		 I2C_GenerateStop(I2Cx , ENABLE);
 8000acc:	2101      	movs	r1, #1
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f000 f945 	bl	8000d5e <I2C_GenerateStop>
	}

}
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	00070080 	.word	0x00070080

08000ae0 <MCAL_I2C_Master_RX>:
* Note					- We will use Master Polling Mechanism
*/
/**================================================================*/

void MCAL_I2C_Master_RX(I2C_TypeDef *I2Cx , uint16_t devAdd , uint8_t* dataOut , uint32_t dataLen , Stop_Condition Stop , Repeated_Start start)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	460b      	mov	r3, r1
 8000aee:	817b      	strh	r3, [r7, #10]
	uint8_t index = I2Cx == I2C1 ? I2C1_Index : I2C2_Index;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <MCAL_I2C_Master_RX+0xd8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	bf14      	ite	ne
 8000af8:	2301      	movne	r3, #1
 8000afa:	2300      	moveq	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	74fb      	strb	r3, [r7, #19]
	int i =0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
	// to do support timeout configure timer for specific duration rise interrupt
	// timer interrupt() { flag=0 }
	// so any code exist in while (check flag && any polling condition)

	// 1. Set the START bit in I2C_CR1 register to generate start Condition
	I2C_GenerateStar(I2Cx , ENABLE,  start);
 8000b04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 f857 	bl	8000bc0 <I2C_GenerateStar>

	// 2.Wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while( !(I2C_GetFlagStatus( I2Cx, EV5)));
 8000b12:	bf00      	nop
 8000b14:	2101      	movs	r1, #1
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f000 f87a 	bl	8000c10 <I2C_GetFlagStatus>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f8      	beq.n	8000b14 <MCAL_I2C_Master_RX+0x34>

	// 3- Send Address
	I2C_SendAddress( I2Cx,  devAdd , I2C_Direction_Recieve);
 8000b22:	897b      	ldrh	r3, [r7, #10]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f000 f8f9 	bl	8000d20 <I2C_SendAddress>

	// 4.Wait for EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while( !(I2C_GetFlagStatus( I2Cx, EV6)));
 8000b2e:	bf00      	nop
 8000b30:	2102      	movs	r1, #2
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f86c 	bl	8000c10 <I2C_GetFlagStatus>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f8      	beq.n	8000b30 <MCAL_I2C_Master_RX+0x50>

	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8000b3e:	2101      	movs	r1, #1
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f000 f927 	bl	8000d94 <I2C_AcknowledgeConfig>

	if(dataLen)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d01c      	beq.n	8000b86 <MCAL_I2C_Master_RX+0xa6>
	{
		// Read the data until length become zero
		for (i = dataLen; i > 1 ; i--)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e012      	b.n	8000b78 <MCAL_I2C_Master_RX+0x98>
		{
			// 5.Wait EV7
			// EV7: RxNE=1 Cleared by reading DR register
			while( !(I2C_GetFlagStatus( I2Cx, EV7)));
 8000b52:	bf00      	nop
 8000b54:	2106      	movs	r1, #6
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 f85a 	bl	8000c10 <I2C_GetFlagStatus>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0f8      	beq.n	8000b54 <MCAL_I2C_Master_RX+0x74>

			// Read the data from data register in to buffer
			*dataOut = I2Cx->DR ;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	701a      	strb	r2, [r3, #0]
			// increment the buffer address
			dataOut++;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
		for (i = dataLen; i > 1 ; i--)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	dce9      	bgt.n	8000b52 <MCAL_I2C_Master_RX+0x72>
		}
		// Send NACK after received all data
		I2C_AcknowledgeConfig(I2Cx,DISABLE);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f000 f907 	bl	8000d94 <I2C_AcknowledgeConfig>
	}

	if(Stop == WithStop)
 8000b86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <MCAL_I2C_Master_RX+0xb6>
	{
		// 6-Send Stop Condition
		I2C_GenerateStop(I2Cx, ENABLE);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f000 f8e4 	bl	8000d5e <I2C_GenerateStop>
	}

	// re-enable ACK
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8000b96:	7cfb      	ldrb	r3, [r7, #19]
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <MCAL_I2C_Master_RX+0xdc>)
 8000b9a:	015b      	lsls	r3, r3, #5
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3314      	adds	r3, #20
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba6:	d103      	bne.n	8000bb0 <MCAL_I2C_Master_RX+0xd0>
	{
		I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f000 f8f2 	bl	8000d94 <I2C_AcknowledgeConfig>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	2000001c 	.word	0x2000001c

08000bc0 <I2C_GenerateStar>:
 * 							Generic Functions
 * =======================================================================================
 */

void I2C_GenerateStar(I2C_TypeDef *I2Cx , FunctionalState NewState, Repeated_Start Start)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	70bb      	strb	r3, [r7, #2]
	// Check if the start is the normal start or repeated start
	if(Start != RepeatedSart)
 8000bd0:	78bb      	ldrb	r3, [r7, #2]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d007      	beq.n	8000be6 <I2C_GenerateStar+0x26>
	{
		// Check if the bus is idle
		while( I2C_GetFlagStatus( I2Cx, I2C_FLAG_BUSY) );
 8000bd6:	bf00      	nop
 8000bd8:	2100      	movs	r1, #0
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f818 	bl	8000c10 <I2C_GetFlagStatus>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f8      	bne.n	8000bd8 <I2C_GenerateStar+0x18>
	//	This bit is set and cleared by software and cleared by hardware when start is sent or PE=0.
	//	In Master Mode:
	//	0: No Start generation
	//	1: Repeated start generation

	if(NewState != DISABLE)
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <I2C_GenerateStar+0x3a>
	{
		/*Generate Start Condition*/
		I2Cx->CR1 |= I2C_CR1_START;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
	{
		/*Disable Start Condition Generation*/
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}

}
 8000bf8:	e005      	b.n	8000c06 <I2C_GenerateStar+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <I2C_GetFlagStatus>:



FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status Flag)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	FlagStatus bitstatus = RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	77fb      	strb	r3, [r7, #31]
	volatile uint32_t dummy_Read;
	uint32_t flag1 = 0 ,flag2 =0 , lastevent =0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]


	switch(Flag)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d806      	bhi.n	8000c3e <I2C_GetFlagStatus+0x2e>
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d230      	bcs.n	8000c96 <I2C_GetFlagStatus+0x86>
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d016      	beq.n	8000c66 <I2C_GetFlagStatus+0x56>
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d820      	bhi.n	8000c7e <I2C_GetFlagStatus+0x6e>
 8000c3c:	e007      	b.n	8000c4e <I2C_GetFlagStatus+0x3e>
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d041      	beq.n	8000cc6 <I2C_GetFlagStatus+0xb6>
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d333      	bcc.n	8000cae <I2C_GetFlagStatus+0x9e>
 8000c46:	4a35      	ldr	r2, [pc, #212]	; (8000d1c <I2C_GetFlagStatus+0x10c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d048      	beq.n	8000cde <I2C_GetFlagStatus+0xce>
 8000c4c:	e05f      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
		// – Set by hardware on detection of SDA or SCL low
		// – cleared by hardware on detection of a Stop condition.
		// It indicates a communication in progress on the bus. This information is still updated when
		// the interface is disabled (PE=0).

		if( (I2Cx->SR2) & (I2C_SR2_BUSY) )
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <I2C_GetFlagStatus+0x50>
			bitstatus = SET;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;

		break;
 8000c5e:	e056      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
			bitstatus = RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	77fb      	strb	r3, [r7, #31]
		break;
 8000c64:	e053      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
		// 1: Start condition generated.
		// – Set when a Start condition generated.
		// – Cleared by software by reading the SR1 register followed by writing the DR register, or by
		// hardware when PE=0   the interface is disabled (PE=0).

		if( (I2Cx->SR1) & (I2C_SR1_SB) )
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <I2C_GetFlagStatus+0x68>
			bitstatus = SET;
 8000c72:	2301      	movs	r3, #1
 8000c74:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;

		break;
 8000c76:	e04a      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
			bitstatus = RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	77fb      	strb	r3, [r7, #31]
		break;
 8000c7c:	e047      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
		// when PE=0.
		// Address sent (Master)
		// 0: No end of address transmission
		// 1: End of address transmission
		// – For 7-bit addressing, the bit is set after the ACK of the byte.
		if( (I2Cx->SR1) & (I2C_SR1_ADDR) )
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <I2C_GetFlagStatus+0x80>
			bitstatus = SET;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;

		break;
 8000c8e:	e03e      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
			bitstatus = RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	77fb      	strb	r3, [r7, #31]
		break;
 8000c94:	e03b      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0: Data register not empty
		// 1: Data register empty

		if( (I2Cx->SR1) & (I2C_SR1_TXE) )
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <I2C_GetFlagStatus+0x98>
			bitstatus = SET;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;

		break;
 8000ca6:	e032      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
			bitstatus = RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	77fb      	strb	r3, [r7, #31]
		break;
 8000cac:	e02f      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
	{
		// Bit 2 BTF: Byte transfer finished
		// 0: Data byte transfer not done
		// 1: Data byte transfer succeeded

		if( (I2Cx->SR1) & (I2C_SR1_BTF) )
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <I2C_GetFlagStatus+0xb0>
			bitstatus = SET;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;

		break;
 8000cbe:	e026      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
			bitstatus = RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	77fb      	strb	r3, [r7, #31]
		break;
 8000cc4:	e023      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
	{
		// Bit 6 RxNE: Data register not empty (receivers)
		// 0: Data register empty
		// 1: Data register not empty

		if( (I2Cx->SR1) & (I2C_SR1_RXNE) )
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <I2C_GetFlagStatus+0xc8>
			bitstatus = SET;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;

		break;
 8000cd6:	e01a      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
			bitstatus = RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	77fb      	strb	r3, [r7, #31]
		break;
 8000cdc:	e017      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>

	case MASTER_BYTE_TRANSMITING:
	{

		/* Read The I2Cx Status Register */
		flag1 = I2Cx->SR1;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	617b      	str	r3, [r7, #20]
		flag2 = flag2<<16;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	041b      	lsls	r3, r3, #16
 8000cee:	617b      	str	r3, [r7, #20]
		/*Get the last Event value from I2C Status Register*/
		lastevent = (flag1 | flag2) & ((uint32_t) 0xffffffff);
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
		//Check whether last event contain THE I2C_EVENT
		if((lastevent & MASTER_BYTE_TRANSMITING) == MASTER_BYTE_TRANSMITING)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <I2C_GetFlagStatus+0x10c>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <I2C_GetFlagStatus+0x10c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d102      	bne.n	8000d0a <I2C_GetFlagStatus+0xfa>
		{
			/* Success Last event contain THE I2C_EVENT */
			bitstatus = SET;
 8000d04:	2301      	movs	r3, #1
 8000d06:	77fb      	strb	r3, [r7, #31]
 8000d08:	e001      	b.n	8000d0e <I2C_GetFlagStatus+0xfe>
		}

		else
		{
			/* Error Last event is different from THE I2C_EVENT */
			bitstatus = RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	77fb      	strb	r3, [r7, #31]
		}

	}

	}
	return bitstatus;
 8000d0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3724      	adds	r7, #36	; 0x24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	00070080 	.word	0x00070080

08000d20 <I2C_SendAddress>:



// Supported Only 7 bit address mode
void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16_t Address , I2C_Direction Direction)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	707b      	strb	r3, [r7, #1]
	Address = Address << 1;
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	807b      	strh	r3, [r7, #2]

	if(Direction != I2C_Direction_Transmitter)
 8000d36:	787b      	ldrb	r3, [r7, #1]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d004      	beq.n	8000d46 <I2C_SendAddress+0x26>
	{
		/* set the address bit0 for read */
		Address |= 1<<0;
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	e003      	b.n	8000d4e <I2C_SendAddress+0x2e>
	}

	else
	{
		/* Reset the address bit0 for write */
		Address &= ~(1 << 0);
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	807b      	strh	r3, [r7, #2]
	}

	/* Send the Address */
	I2Cx->DR = Address;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	611a      	str	r2, [r3, #16]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <I2C_GenerateStop>:




void I2C_GenerateStop(I2C_TypeDef *I2Cx , FunctionalState NewState)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	70fb      	strb	r3, [r7, #3]
	//	detected, set by hardware when a timeout error is detected.
	//	In Master Mode:
	//	0: No Stop generation.
	//	1: Stop generation after the current byte transfer or after the current Start condition is sent

	if(NewState != DISABLE)
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <I2C_GenerateStop+0x20>
		{
			/* Generate Stop Condition */
			I2Cx->CR1 |= I2C_CR1_STOP;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	601a      	str	r2, [r3, #0]
		else
		{
			/* Disable Stop Condition Generation */
			I2Cx->CR1 &= ~(I2C_CR1_STOP);
		}
}
 8000d7c:	e005      	b.n	8000d8a <I2C_GenerateStop+0x2c>
			I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <I2C_AcknowledgeConfig>:




void I2C_AcknowledgeConfig(I2C_TypeDef *I2Cx,FunctionalState NewState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]
	// Bit 10 ACK: Acknowledge enable
	// This bit is set and cleared by software and cleared by hardware when PE=0.
	// 0: No acknowledge returned
	// 1: Acknowledge returned after a byte is received (matched address or data)

	if(NewState != DISABLE)
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <I2C_AcknowledgeConfig+0x20>
		{
		/*Acknowledge returned after a byte is received (matched address or data) */
			I2Cx->CR1 |= I2C_CR1_ACK;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
		else
		{
			/* No acknowledge returned */
			I2Cx->CR1 &= ~(I2C_CR1_ACK);
		}
}
 8000db2:	e005      	b.n	8000dc0 <I2C_AcknowledgeConfig+0x2c>
			I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
	...

08000dcc <Slave_Status>:
 * =================================================================
 */


void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? I2C1_Index : I2C2_Index ;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a2c      	ldr	r2, [pc, #176]	; (8000e8c <Slave_Status+0xc0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	bf14      	ite	ne
 8000de0:	2301      	movne	r3, #1
 8000de2:	2300      	moveq	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73fb      	strb	r3, [r7, #15]

	switch(state)
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d84a      	bhi.n	8000e84 <Slave_Status+0xb8>
 8000dee:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <Slave_Status+0x28>)
 8000df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df4:	08000e0f 	.word	0x08000e0f
 8000df8:	08000e09 	.word	0x08000e09
 8000dfc:	08000e2d 	.word	0x08000e2d
 8000e00:	08000e3f 	.word	0x08000e3f
 8000e04:	08000e5d 	.word	0x08000e5d
	{
	case I2C_ERROR_AF :
	{
		// Make Sure the Slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
		{
			// Slave shouldn't send anything else
		}

		break;
 8000e0c:	e03a      	b.n	8000e84 <Slave_Status+0xb8>
	}

	case I2C_EV_STOP :
	{
		// Make Sure the Slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d02f      	beq.n	8000e7a <Slave_Status+0xae>
		{
			// Notify APP that the stop condition is sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <Slave_Status+0xc4>)
 8000e1e:	015b      	lsls	r3, r3, #5
 8000e20:	4413      	add	r3, r2
 8000e22:	331c      	adds	r3, #28
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2000      	movs	r0, #0
 8000e28:	4798      	blx	r3
		}

		break;
 8000e2a:	e026      	b.n	8000e7a <Slave_Status+0xae>
	}

	case I2C_EV_ADDR_Matched :
	{
		// Notify APP that the stop condition is sent by the master
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <Slave_Status+0xc4>)
 8000e30:	015b      	lsls	r3, r3, #5
 8000e32:	4413      	add	r3, r2
 8000e34:	331c      	adds	r3, #28
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2002      	movs	r0, #2
 8000e3a:	4798      	blx	r3

		break;
 8000e3c:	e022      	b.n	8000e84 <Slave_Status+0xb8>
	}

	case I2C_EV_DATA_REQ :
	{
		// Make Sure the Slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d019      	beq.n	8000e7e <Slave_Status+0xb2>
		{
			// the APP layer should send the data (MCAL_I2C_Slave_SendData) in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <Slave_Status+0xc4>)
 8000e4e:	015b      	lsls	r3, r3, #5
 8000e50:	4413      	add	r3, r2
 8000e52:	331c      	adds	r3, #28
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2003      	movs	r0, #3
 8000e58:	4798      	blx	r3
		}

		break;
 8000e5a:	e010      	b.n	8000e7e <Slave_Status+0xb2>
	}

	case I2C_EV_DATA_RCV :
	{
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10c      	bne.n	8000e82 <Slave_Status+0xb6>
		{
			// the APP layer should read the data (MCAL_I2C_Slave_RX) in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <Slave_Status+0xc4>)
 8000e6c:	015b      	lsls	r3, r3, #5
 8000e6e:	4413      	add	r3, r2
 8000e70:	331c      	adds	r3, #28
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2004      	movs	r0, #4
 8000e76:	4798      	blx	r3
		}

		break;
 8000e78:	e003      	b.n	8000e82 <Slave_Status+0xb6>
		break;
 8000e7a:	bf00      	nop
 8000e7c:	e002      	b.n	8000e84 <Slave_Status+0xb8>
		break;
 8000e7e:	bf00      	nop
 8000e80:	e000      	b.n	8000e84 <Slave_Status+0xb8>
		break;
 8000e82:	bf00      	nop
	}

	}
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	2000001c 	.word	0x2000001c

08000e94 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
	uint32_t Dummy_Read = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]

	// Interrupt handling for both master and slave mode of the device
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea6:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 8000ea8:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb0:	607b      	str	r3, [r7, #4]
	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 8000eb2:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	603b      	str	r3, [r7, #0]

	// Handle Stop Condition Event
	// Note : Stop detection flag is applicable only with slave mode
	if(Temp_1 && Temp_3)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <I2C1_EV_IRQHandler+0x44>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d007      	beq.n	8000ed8 <I2C1_EV_IRQHandler+0x44>
	{
		// STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		// I have already read SR1 in Temp_3
		// then next statement i will write to CR1

		I2C1->CR1 |= 0x0000;
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000eca:	4a2b      	ldr	r2, [pc, #172]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4829      	ldr	r0, [pc, #164]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000ed4:	f7ff ff7a 	bl	8000dcc <Slave_Status>
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));		//ADDR
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	603b      	str	r3, [r7, #0]
	// handle for interrupt generate by ADDR
	// Note : when master mode : address is sent
	// Note : when slave mode : address match with own address
	if(Temp_1 && Temp_3)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d012      	beq.n	8000f0e <I2C1_EV_IRQHandler+0x7a>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00f      	beq.n	8000f0e <I2C1_EV_IRQHandler+0x7a>
	{
		// clear ADDR flag
		// In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set.

		/* Check master mode or slave mode */
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d109      	bne.n	8000f0e <I2C1_EV_IRQHandler+0x7a>

		else
		{
			/* Slave mode */
			// to clear ADDR flag [ read SR1 , Read SR2 ]
			Dummy_Read  = I2C1->SR1;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	60fb      	str	r3, [r7, #12]
			Dummy_Read  = I2C1->SR2;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	60fb      	str	r3, [r7, #12]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched);
 8000f06:	2102      	movs	r1, #2
 8000f08:	481b      	ldr	r0, [pc, #108]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000f0a:	f7ff ff5f 	bl	8000dcc <Slave_Status>
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));		// TXE
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	603b      	str	r3, [r7, #0]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00f      	beq.n	8000f3e <I2C1_EV_IRQHandler+0xaa>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00c      	beq.n	8000f3e <I2C1_EV_IRQHandler+0xaa>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d009      	beq.n	8000f3e <I2C1_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d103      	bne.n	8000f3e <I2C1_EV_IRQHandler+0xaa>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 8000f36:	2103      	movs	r1, #3
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000f3a:	f7ff ff47 	bl	8000dcc <Slave_Status>
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));		// RXNE
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f46:	603b      	str	r3, [r7, #0]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00f      	beq.n	8000f6e <I2C1_EV_IRQHandler+0xda>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00c      	beq.n	8000f6e <I2C1_EV_IRQHandler+0xda>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d009      	beq.n	8000f6e <I2C1_EV_IRQHandler+0xda>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d103      	bne.n	8000f6e <I2C1_EV_IRQHandler+0xda>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 8000f66:	2104      	movs	r1, #4
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <I2C1_EV_IRQHandler+0xe4>)
 8000f6a:	f7ff ff2f 	bl	8000dcc <Slave_Status>
		}
	}

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40005400 	.word	0x40005400

08000f7c <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler()
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler()
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler()
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <MCAL_RCC_GetSYS_CLCKFreq>:
 * =======================================================================================
 */


uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable

	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d006      	beq.n	8000fc0 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d302      	bcc.n	8000fbc <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d004      	beq.n	8000fc4 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000fba:	e005      	b.n	8000fc8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{

	case 0:
		return HSI_RC_Clk ;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000fbe:	e003      	b.n	8000fc8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:
		// to do need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000fc2:	e001      	b.n	8000fc8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:
		// to do need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000fc6:	e7ff      	b.n	8000fc8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	007a1200 	.word	0x007a1200
 8000fd8:	00f42400 	.word	0x00f42400

08000fdc <MCAL_RCC_GetHCLKFreq>:



uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	/* Get SYSCLK source and Compute HCLK frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); // the first shift is Dividing
 8000fe0:	f7ff ffde 	bl	8000fa0 <MCAL_RCC_GetSYS_CLCKFreq>
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <MCAL_RCC_GetHCLKFreq+0x20>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	4a03      	ldr	r2, [pc, #12]	; (8001000 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000ff2:	5cd3      	ldrb	r3, [r2, r3]
 8000ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	08001190 	.word	0x08001190

08001004 <MCAL_RCC_GetPCLK1Freq>:


// APB Low speed clock (PCLK1).
// Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is Dividing
 8001008:	f7ff ffe8 	bl	8000fdc <MCAL_RCC_GetHCLKFreq>
 800100c:	4601      	mov	r1, r0
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	4a03      	ldr	r2, [pc, #12]	; (8001028 <MCAL_RCC_GetPCLK1Freq+0x24>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	08001188 	.word	0x08001188

0800102c <SPI1_IRQHandler>:
 *                            IRQ
 * =================================================================
 */

void SPI1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <SPI1_IRQHandler+0x54>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	793b      	ldrb	r3, [r7, #4]
 8001040:	f362 0300 	bfi	r3, r2, #0, #1
 8001044:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <SPI1_IRQHandler+0x54>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	793b      	ldrb	r3, [r7, #4]
 8001052:	f362 0341 	bfi	r3, r2, #1, #1
 8001056:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <SPI1_IRQHandler+0x54>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	f362 0382 	bfi	r3, r2, #2, #1
 800106a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SPI1_IRQHandler+0x58>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	7938      	ldrb	r0, [r7, #4]
 8001074:	4798      	blx	r3
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40013000 	.word	0x40013000
 8001084:	2000005c 	.word	0x2000005c

08001088 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI2->SR & (1<<1)) >> 1);
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <SPI2_IRQHandler+0x54>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	793b      	ldrb	r3, [r7, #4]
 800109c:	f362 0300 	bfi	r3, r2, #0, #1
 80010a0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <SPI2_IRQHandler+0x54>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	793b      	ldrb	r3, [r7, #4]
 80010ae:	f362 0341 	bfi	r3, r2, #1, #1
 80010b2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <SPI2_IRQHandler+0x54>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	793b      	ldrb	r3, [r7, #4]
 80010c2:	f362 0382 	bfi	r3, r2, #2, #1
 80010c6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SPI2_IRQHandler+0x58>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	7938      	ldrb	r0, [r7, #4]
 80010d0:	4798      	blx	r3
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40003800 	.word	0x40003800
 80010e0:	2000005c 	.word	0x2000005c

080010e4 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <USART1_IRQHandler+0x10>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	4798      	blx	r3
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000064 	.word	0x20000064

080010f8 <USART2_IRQHandler>:


void USART2_IRQHandler (void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <USART2_IRQHandler+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	4798      	blx	r3
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000064 	.word	0x20000064

0800110c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8001110:	4b02      	ldr	r3, [pc, #8]	; (800111c <USART3_IRQHandler+0x10>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	4798      	blx	r3
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000064 	.word	0x20000064

08001120 <__libc_init_array>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	2500      	movs	r5, #0
 8001124:	4e0c      	ldr	r6, [pc, #48]	; (8001158 <__libc_init_array+0x38>)
 8001126:	4c0d      	ldr	r4, [pc, #52]	; (800115c <__libc_init_array+0x3c>)
 8001128:	1ba4      	subs	r4, r4, r6
 800112a:	10a4      	asrs	r4, r4, #2
 800112c:	42a5      	cmp	r5, r4
 800112e:	d109      	bne.n	8001144 <__libc_init_array+0x24>
 8001130:	f000 f81a 	bl	8001168 <_init>
 8001134:	2500      	movs	r5, #0
 8001136:	4e0a      	ldr	r6, [pc, #40]	; (8001160 <__libc_init_array+0x40>)
 8001138:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <__libc_init_array+0x44>)
 800113a:	1ba4      	subs	r4, r4, r6
 800113c:	10a4      	asrs	r4, r4, #2
 800113e:	42a5      	cmp	r5, r4
 8001140:	d105      	bne.n	800114e <__libc_init_array+0x2e>
 8001142:	bd70      	pop	{r4, r5, r6, pc}
 8001144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001148:	4798      	blx	r3
 800114a:	3501      	adds	r5, #1
 800114c:	e7ee      	b.n	800112c <__libc_init_array+0xc>
 800114e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001152:	4798      	blx	r3
 8001154:	3501      	adds	r5, #1
 8001156:	e7f2      	b.n	800113e <__libc_init_array+0x1e>
 8001158:	080011a0 	.word	0x080011a0
 800115c:	080011a0 	.word	0x080011a0
 8001160:	080011a0 	.word	0x080011a0
 8001164:	080011a4 	.word	0x080011a4

08001168 <_init>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	bf00      	nop
 800116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116e:	bc08      	pop	{r3}
 8001170:	469e      	mov	lr, r3
 8001172:	4770      	bx	lr

08001174 <_fini>:
 8001174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001176:	bf00      	nop
 8001178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800117a:	bc08      	pop	{r3}
 800117c:	469e      	mov	lr, r3
 800117e:	4770      	bx	lr
