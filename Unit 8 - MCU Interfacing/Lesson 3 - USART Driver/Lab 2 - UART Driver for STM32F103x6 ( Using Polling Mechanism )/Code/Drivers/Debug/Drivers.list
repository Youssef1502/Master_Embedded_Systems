
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000093c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a84  08000a84  00010a8c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a84  08000a84  00010a8c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a84  08000a8c  00010a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a84  08000a84  00010a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a88  08000a88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000a8c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000a8c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a8c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000406b  00000000  00000000  00010ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a03  00000000  00000000  00014b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a28  00000000  00000000  00015523  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00015f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00016118  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d17  00000000  00000000  00016288  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000231b  00000000  00000000  00016f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b22c  00000000  00000000  000192ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000244e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000574  00000000  00000000  00024564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a54 	.word	0x08000a54

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a54 	.word	0x08000a54

08000170 <clock_init>:


unsigned char ch;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable CLock
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:

int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
	clock_init();
 80001aa:	f7ff ffe1 	bl	8000170 <clock_init>

	UART_Config uartCFG ;

	uartCFG.BaudRate = UART_BaudRate_115200 ;
 80001ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001b2:	60bb      	str	r3, [r7, #8]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE ;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]
	uartCFG.IRQ_Enable = UART_IRQ_Enable_NONE;
 80001b8:	2300      	movs	r3, #0
 80001ba:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_CallBack = NULL ;
 80001bc:	2300      	movs	r3, #0
 80001be:	617b      	str	r3, [r7, #20]
	uartCFG.Parity =UART_Parity__NONE ;
 80001c0:	2300      	movs	r3, #0
 80001c2:	737b      	strb	r3, [r7, #13]
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 80001c4:	2300      	movs	r3, #0
 80001c6:	733b      	strb	r3, [r7, #12]
	uartCFG.StopBits = UART_StopBits__1 ;
 80001c8:	2300      	movs	r3, #0
 80001ca:	73bb      	strb	r3, [r7, #14]
	uartCFG.USART_Mode = UART_MODE_TX_RX ;
 80001cc:	230c      	movs	r3, #12
 80001ce:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &uartCFG);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <main+0x54>)
 80001d6:	f000 f9a7 	bl	8000528 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001da:	4807      	ldr	r0, [pc, #28]	; (80001f8 <main+0x54>)
 80001dc:	f000 fab0 	bl	8000740 <MCAL_UART_GPIO_Set_Pins>

	// Loop forever
	while(1)
	{
		MCAL_UART_ReceiveData(USART1 , &ch , enable);
 80001e0:	2200      	movs	r2, #0
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <main+0x58>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <main+0x54>)
 80001e6:	f000 fa7d 	bl	80006e4 <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1 , &ch , enable);
 80001ea:	2200      	movs	r2, #0
 80001ec:	4903      	ldr	r1, [pc, #12]	; (80001fc <main+0x58>)
 80001ee:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x54>)
 80001f0:	f000 fa5c 	bl	80006ac <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(USART1 , &ch , enable);
 80001f4:	e7f4      	b.n	80001e0 <main+0x3c>
 80001f6:	bf00      	nop
 80001f8:	40013800 	.word	0x40013800
 80001fc:	20000020 	.word	0x20000020

08000200 <Reset_Handler>:
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
 8000202:	4685      	mov	sp, r0
 8000204:	f3af 8000 	nop.w
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
 800020e:	2300      	movs	r3, #0
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:
 8000212:	58d4      	ldr	r4, [r2, r3]
 8000214:	50c4      	str	r4, [r0, r3]
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:
 8000218:	18c4      	adds	r4, r0, r3
 800021a:	428c      	cmp	r4, r1
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
 8000222:	2300      	movs	r3, #0
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:
 800022a:	42a2      	cmp	r2, r4
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>
 800022e:	f000 fbed 	bl	8000a0c <__libc_init_array>
 8000232:	f7ff ffb7 	bl	80001a4 <main>

08000236 <LoopForever>:
 8000236:	e7fe      	b.n	8000236 <LoopForever>
 8000238:	20002800 	.word	0x20002800
 800023c:	20000000 	.word	0x20000000
 8000240:	20000000 	.word	0x20000000
 8000244:	08000a8c 	.word	0x08000a8c
 8000248:	20000000 	.word	0x20000000
 800024c:	20000060 	.word	0x20000060

08000250 <ADC1_2_IRQHandler>:
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <EXTI0_IRQHandler>:
					ISR FUNCTIONS
//**==================================================
//**===============================================**/

void EXTI0_IRQHandler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <EXTI0_IRQHandler+0x20>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4798      	blx	r3
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010400 	.word	0x40010400
 8000274:	20000024 	.word	0x20000024

08000278 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<1);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[1]();
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <EXTI1_IRQHandler+0x20>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4798      	blx	r3
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010400 	.word	0x40010400
 8000298:	20000024 	.word	0x20000024

0800029c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<2);
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[2]();
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <EXTI2_IRQHandler+0x20>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4798      	blx	r3
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	20000024 	.word	0x20000024

080002c0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<3);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[3]();
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI3_IRQHandler+0x20>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4798      	blx	r3
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010400 	.word	0x40010400
 80002e0:	20000024 	.word	0x20000024

080002e4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit >> Pending register (EXTI_PR)
	EXTI->PR |= (1<<4);
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6153      	str	r3, [r2, #20]
	// Call IRQ_CALL
	GP_IRQ_CallBack[4]();
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI4_IRQHandler+0x20>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4798      	blx	r3
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	20000024 	.word	0x20000024

08000308 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { EXTI->PR |= (1<<5) ;   GP_IRQ_CallBack[5]();  }
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI9_5_IRQHandler+0x22>
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) { EXTI->PR |= (1<<6) ;   GP_IRQ_CallBack[6]();  }
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI9_5_IRQHandler+0x40>
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) { EXTI->PR |= (1<<7) ;   GP_IRQ_CallBack[7]();  }
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI9_5_IRQHandler+0x5e>
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) { EXTI->PR |= (1<<8) ;   GP_IRQ_CallBack[8]();  }
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI9_5_IRQHandler+0x7c>
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000380:	6a1b      	ldr	r3, [r3, #32]
 8000382:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) { EXTI->PR |= (1<<9) ;   GP_IRQ_CallBack[9]();  }
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI9_5_IRQHandler+0x9a>
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	20000024 	.word	0x20000024

080003b0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { EXTI->PR |= (1<<10) ;   GP_IRQ_CallBack[10]();  }
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d008      	beq.n	80003d2 <EXTI15_10_IRQHandler+0x22>
 80003c0:	4b2a      	ldr	r3, [pc, #168]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a29      	ldr	r2, [pc, #164]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d0:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) { EXTI->PR |= (1<<11) ;   GP_IRQ_CallBack[11]();  }
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d008      	beq.n	80003f0 <EXTI15_10_IRQHandler+0x40>
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a22      	ldr	r2, [pc, #136]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) { EXTI->PR |= (1<<12) ;   GP_IRQ_CallBack[12]();  }
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <EXTI15_10_IRQHandler+0x5e>
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000402:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000406:	6153      	str	r3, [r2, #20]
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) { EXTI->PR |= (1<<13) ;   GP_IRQ_CallBack[13]();  }
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <EXTI15_10_IRQHandler+0x7c>
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a13      	ldr	r2, [pc, #76]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) { EXTI->PR |= (1<<14) ;   GP_IRQ_CallBack[14]();  }
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <EXTI15_10_IRQHandler+0x9a>
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6153      	str	r3, [r2, #20]
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000448:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) { EXTI->PR |= (1<<15) ;   GP_IRQ_CallBack[15]();  }
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d008      	beq.n	8000468 <EXTI15_10_IRQHandler+0xb8>
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a04      	ldr	r2, [pc, #16]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800045c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000466:	4798      	blx	r3
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010400 	.word	0x40010400
 8000470:	20000024 	.word	0x20000024

08000474 <MCAL_RCC_GetSYS_CLCKFreq>:
 * =======================================================================================
 */


uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable

	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	089b      	lsrs	r3, r3, #2
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	2b01      	cmp	r3, #1
 8000484:	d006      	beq.n	8000494 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000486:	2b01      	cmp	r3, #1
 8000488:	d302      	bcc.n	8000490 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 800048a:	2b02      	cmp	r3, #2
 800048c:	d004      	beq.n	8000498 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 800048e:	e005      	b.n	800049c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{

	case 0:
		return HSI_RC_Clk ;
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000492:	e003      	b.n	800049c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:
		// to do need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000496:	e001      	b.n	800049c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:
		// to do need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800049a:	e7ff      	b.n	800049c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 800049c:	4618      	mov	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	007a1200 	.word	0x007a1200
 80004ac:	00f42400 	.word	0x00f42400

080004b0 <MCAL_RCC_GetHCLKFreq>:



uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	/* Get SYSCLK source and Compute HCLK frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); // the first shift is Dividing
 80004b4:	f7ff ffde 	bl	8000474 <MCAL_RCC_GetSYS_CLCKFreq>
 80004b8:	4601      	mov	r1, r0
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <MCAL_RCC_GetHCLKFreq+0x20>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	091b      	lsrs	r3, r3, #4
 80004c0:	f003 030f 	and.w	r3, r3, #15
 80004c4:	4a03      	ldr	r2, [pc, #12]	; (80004d4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80004c6:	5cd3      	ldrb	r3, [r2, r3]
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	08000a74 	.word	0x08000a74

080004d8 <MCAL_RCC_GetPCLK1Freq>:


// APB Low speed clock (PCLK1).
// Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is Dividing
 80004dc:	f7ff ffe8 	bl	80004b0 <MCAL_RCC_GetHCLKFreq>
 80004e0:	4601      	mov	r1, r0
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	f003 0307 	and.w	r3, r3, #7
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <MCAL_RCC_GetPCLK1Freq+0x24>)
 80004ee:	5cd3      	ldrb	r3, [r2, r3]
 80004f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	08000a6c 	.word	0x08000a6c

08000500 <MCAL_RCC_GetPCLK2Freq>:

// APB High speed clock (PCLK2).
// Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is Dividing
 8000504:	f7ff ffd4 	bl	80004b0 <MCAL_RCC_GetHCLKFreq>
 8000508:	4601      	mov	r1, r0
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	0adb      	lsrs	r3, r3, #11
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000516:	5cd3      	ldrb	r3, [r2, r3]
 8000518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	08000a6c 	.word	0x08000a6c

08000528 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 8000532:	4a57      	ldr	r2, [pc, #348]	; (8000690 <MCAL_UART_Init+0x168>)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;

	//	enable the Clock for given USART peripheral
	if ( USARTx == USART1 )
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a56      	ldr	r2, [pc, #344]	; (8000694 <MCAL_UART_Init+0x16c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000540:	4b55      	ldr	r3, [pc, #340]	; (8000698 <MCAL_UART_Init+0x170>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a54      	ldr	r2, [pc, #336]	; (8000698 <MCAL_UART_Init+0x170>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	e014      	b.n	8000578 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a52      	ldr	r2, [pc, #328]	; (800069c <MCAL_UART_Init+0x174>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d106      	bne.n	8000564 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000556:	4b50      	ldr	r3, [pc, #320]	; (8000698 <MCAL_UART_Init+0x170>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a4f      	ldr	r2, [pc, #316]	; (8000698 <MCAL_UART_Init+0x170>)
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	e009      	b.n	8000578 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a4e      	ldr	r2, [pc, #312]	; (80006a0 <MCAL_UART_Init+0x178>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d105      	bne.n	8000578 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 800056c:	4b4a      	ldr	r3, [pc, #296]	; (8000698 <MCAL_UART_Init+0x170>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	4a49      	ldr	r2, [pc, #292]	; (8000698 <MCAL_UART_Init+0x170>)
 8000572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000576:	61d3      	str	r3, [r2, #28]


	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	7812      	ldrb	r2, [r2, #0]
 800058c:	431a      	orrs	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	7a12      	ldrb	r2, [r2, #8]
 800059a:	431a      	orrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	7a52      	ldrb	r2, [r2, #9]
 80005a8:	431a      	orrs	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	7a92      	ldrb	r2, [r2, #10]
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	7ad2      	ldrb	r2, [r2, #11]
 80005c4:	431a      	orrs	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <MCAL_UART_Init+0x16c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d103      	bne.n	80005da <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 80005d2:	f7ff ff95 	bl	8000500 <MCAL_RCC_GetPCLK2Freq>
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	e002      	b.n	80005e0 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 80005da:	f7ff ff7d 	bl	80004d8 <MCAL_RCC_GetPCLK1Freq>
 80005de:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ec:	0119      	lsls	r1, r3, #4
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	4613      	mov	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	009a      	lsls	r2, r3, #2
 80005f8:	441a      	add	r2, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	fbb2 f2f3 	udiv	r2, r2, r3
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	011b      	lsls	r3, r3, #4
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	fb00 f303 	mul.w	r3, r0, r3
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <MCAL_UART_Init+0x17c>)
 800061c:	fba2 2303 	umull	r2, r3, r2, r3
 8000620:	095b      	lsrs	r3, r3, #5
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	430b      	orrs	r3, r1
 8000628:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	7b1b      	ldrb	r3, [r3, #12]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d026      	beq.n	8000686 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	7b12      	ldrb	r2, [r2, #12]
 8000640:	431a      	orrs	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MCAL_UART_Init+0x16c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d106      	bne.n	800065c <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MCAL_UART_Init+0x180>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MCAL_UART_Init+0x180>)
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 800065a:	e014      	b.n	8000686 <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART2 )
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <MCAL_UART_Init+0x174>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d106      	bne.n	8000672 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable ;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MCAL_UART_Init+0x180>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MCAL_UART_Init+0x180>)
 800066a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	e009      	b.n	8000686 <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART3 )
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <MCAL_UART_Init+0x178>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d105      	bne.n	8000686 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable ;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MCAL_UART_Init+0x180>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <MCAL_UART_Init+0x180>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6013      	str	r3, [r2, #0]
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000001c 	.word	0x2000001c
 8000694:	40013800 	.word	0x40013800
 8000698:	40021000 	.word	0x40021000
 800069c:	40004400 	.word	0x40004400
 80006a0:	40004800 	.word	0x40004800
 80006a4:	51eb851f 	.word	0x51eb851f
 80006a8:	e000e104 	.word	0xe000e104

080006ac <MCAL_UART_SendData>:
			//			bit

 */

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	4613      	mov	r3, r2
 80006b8:	71fb      	strb	r3, [r7, #7]
	uint16_t *pdata;

	// wait until TXE flag is set in the SR
	if (PollingEn == enable)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d106      	bne.n	80006ce <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 80006c0:	bf00      	nop
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0f9      	beq.n	80006c2 <MCAL_UART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	605a      	str	r2, [r3, #4]
	}




}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
	...

080006e4 <MCAL_UART_ReceiveData>:




void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	4613      	mov	r3, r2
 80006f0:	71fb      	strb	r3, [r7, #7]
	// Loop over until "Len" number of bytes are transferred
	// wait until RXNE flag is set in the SR
	if (PollingEn == enable)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d106      	bne.n	8000706 <MCAL_UART_ReceiveData+0x22>
	{
		while( ! (USARTx->SR & 1<<5 ));
 80006f8:	bf00      	nop
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0f9      	beq.n	80006fa <MCAL_UART_ReceiveData+0x16>
	}

	else
	{
		//This is 8bit data
		if (Global_UART_Config->Parity ==UART_Parity__NONE)
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MCAL_UART_ReceiveData+0x58>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	7a5b      	ldrb	r3, [r3, #9]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d107      	bne.n	8000720 <MCAL_UART_ReceiveData+0x3c>
		{
			// no parity So all 8bit are considered data
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF ) ;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	b29b      	uxth	r3, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	b29a      	uxth	r2, r3
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	801a      	strh	r2, [r3, #0]
		{
			// Parity is used, so,7 bits will be of user data and 1 bit is parity
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
		}
	}
}
 800071e:	e007      	b.n	8000730 <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	b29b      	uxth	r3, r3
 8000726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800072a:	b29a      	uxth	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	801a      	strh	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	2000001c 	.word	0x2000001c

08000740 <MCAL_UART_GPIO_Set_Pins>:
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */

void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d118      	bne.n	8000782 <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000754:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000756:	2306      	movs	r3, #6
 8000758:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	4825      	ldr	r0, [pc, #148]	; (80007fc <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000766:	f000 f8d2 	bl	800090e <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800076a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000770:	2308      	movs	r3, #8
 8000772:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4820      	ldr	r0, [pc, #128]	; (80007fc <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800077c:	f000 f8c7 	bl	800090e <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8000780:	e036      	b.n	80007f0 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2 )
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d116      	bne.n	80007b8 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800078a:	2304      	movs	r3, #4
 800078c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800078e:	2306      	movs	r3, #6
 8000790:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000792:	2301      	movs	r3, #1
 8000794:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4619      	mov	r1, r3
 800079c:	4817      	ldr	r0, [pc, #92]	; (80007fc <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800079e:	f000 f8b6 	bl	800090e <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80007a2:	2308      	movs	r3, #8
 80007a4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80007a6:	2308      	movs	r3, #8
 80007a8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4812      	ldr	r0, [pc, #72]	; (80007fc <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80007b2:	f000 f8ac 	bl	800090e <MCAL_GPIO_Init>
}
 80007b6:	e01b      	b.n	80007f0 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d117      	bne.n	80007f0 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80007c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007c6:	2306      	movs	r3, #6
 80007c8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007ca:	2301      	movs	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80007d6:	f000 f89a 	bl	800090e <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80007da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007de:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80007e0:	2308      	movs	r3, #8
 80007e2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80007ec:	f000 f88f 	bl	800090e <MCAL_GPIO_Init>
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40013800 	.word	0x40013800
 80007fc:	40010800 	.word	0x40010800
 8000800:	40004400 	.word	0x40004400
 8000804:	40004800 	.word	0x40004800
 8000808:	40010c00 	.word	0x40010c00

0800080c <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <USART1_IRQHandler+0x10>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	4798      	blx	r3
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000001c 	.word	0x2000001c

08000820 <USART2_IRQHandler>:


void USART2_IRQHandler (void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <USART2_IRQHandler+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	4798      	blx	r3
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000001c 	.word	0x2000001c

08000834 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <USART3_IRQHandler+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	691b      	ldr	r3, [r3, #16]
 800083e:	4798      	blx	r3
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000001c 	.word	0x2000001c

08000848 <Get_CRLH_Position>:
 *                            Generic Functions
 * ========================================================================
 */

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	2b80      	cmp	r3, #128	; 0x80
 8000856:	d042      	beq.n	80008de <Get_CRLH_Position+0x96>
 8000858:	2b80      	cmp	r3, #128	; 0x80
 800085a:	dc11      	bgt.n	8000880 <Get_CRLH_Position+0x38>
 800085c:	2b08      	cmp	r3, #8
 800085e:	d036      	beq.n	80008ce <Get_CRLH_Position+0x86>
 8000860:	2b08      	cmp	r3, #8
 8000862:	dc06      	bgt.n	8000872 <Get_CRLH_Position+0x2a>
 8000864:	2b02      	cmp	r3, #2
 8000866:	d02e      	beq.n	80008c6 <Get_CRLH_Position+0x7e>
 8000868:	2b04      	cmp	r3, #4
 800086a:	d02e      	beq.n	80008ca <Get_CRLH_Position+0x82>
 800086c:	2b01      	cmp	r3, #1
 800086e:	d028      	beq.n	80008c2 <Get_CRLH_Position+0x7a>
 8000870:	e047      	b.n	8000902 <Get_CRLH_Position+0xba>
 8000872:	2b20      	cmp	r3, #32
 8000874:	d02f      	beq.n	80008d6 <Get_CRLH_Position+0x8e>
 8000876:	2b40      	cmp	r3, #64	; 0x40
 8000878:	d02f      	beq.n	80008da <Get_CRLH_Position+0x92>
 800087a:	2b10      	cmp	r3, #16
 800087c:	d029      	beq.n	80008d2 <Get_CRLH_Position+0x8a>
 800087e:	e040      	b.n	8000902 <Get_CRLH_Position+0xba>
 8000880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000884:	d033      	beq.n	80008ee <Get_CRLH_Position+0xa6>
 8000886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800088a:	dc09      	bgt.n	80008a0 <Get_CRLH_Position+0x58>
 800088c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000890:	d029      	beq.n	80008e6 <Get_CRLH_Position+0x9e>
 8000892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000896:	d028      	beq.n	80008ea <Get_CRLH_Position+0xa2>
 8000898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800089c:	d021      	beq.n	80008e2 <Get_CRLH_Position+0x9a>
 800089e:	e030      	b.n	8000902 <Get_CRLH_Position+0xba>
 80008a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a4:	d027      	beq.n	80008f6 <Get_CRLH_Position+0xae>
 80008a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008aa:	dc03      	bgt.n	80008b4 <Get_CRLH_Position+0x6c>
 80008ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b0:	d01f      	beq.n	80008f2 <Get_CRLH_Position+0xaa>
 80008b2:	e026      	b.n	8000902 <Get_CRLH_Position+0xba>
 80008b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008b8:	d01f      	beq.n	80008fa <Get_CRLH_Position+0xb2>
 80008ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008be:	d01e      	beq.n	80008fe <Get_CRLH_Position+0xb6>
 80008c0:	e01f      	b.n	8000902 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e01e      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1 :
		return 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	e01c      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2 :
		return 8;
 80008ca:	2308      	movs	r3, #8
 80008cc:	e01a      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3 :
		return 12;
 80008ce:	230c      	movs	r3, #12
 80008d0:	e018      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 80008d2:	2310      	movs	r3, #16
 80008d4:	e016      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5 :
		return 20;
 80008d6:	2314      	movs	r3, #20
 80008d8:	e014      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6 :
		return 24;
 80008da:	2318      	movs	r3, #24
 80008dc:	e012      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7 :
		return 28;
 80008de:	231c      	movs	r3, #28
 80008e0:	e010      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8 :
		return 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e00e      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9 :
		return 4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	e00c      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10 :
		return 8;
 80008ea:	2308      	movs	r3, #8
 80008ec:	e00a      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11 :
		return 12;
 80008ee:	230c      	movs	r3, #12
 80008f0:	e008      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 80008f2:	2310      	movs	r3, #16
 80008f4:	e006      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13 :
		return 20;
 80008f6:	2314      	movs	r3, #20
 80008f8:	e004      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14 :
		return 24;
 80008fa:	2318      	movs	r3, #24
 80008fc:	e002      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15 :
		return 28;
 80008fe:	231c      	movs	r3, #28
 8000900:	e000      	b.n	8000904 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <MCAL_GPIO_Init>:
 * Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 *                    But LQFP48 Package has Only GPIO A,B, Part of C/D Exported as External Pins from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 800090e:	b590      	push	{r4, r7, lr}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) Configure Pins from 0 >> 7
	// Port configuration register low (GPIOx_CRL) Configure Pins from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	2bff      	cmp	r3, #255	; 0xff
 8000926:	d801      	bhi.n	800092c <MCAL_GPIO_Init+0x1e>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	e001      	b.n	8000930 <MCAL_GPIO_Init+0x22>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3304      	adds	r3, #4
 8000930:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] , Mode[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff86 	bl	8000848 <Get_CRLH_Position>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	230f      	movs	r3, #15
 8000942:	4093      	lsls	r3, r2
 8000944:	43da      	mvns	r2, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	401a      	ands	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	601a      	str	r2, [r3, #0]

	// if pin is Output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	2b07      	cmp	r3, #7
 8000956:	d00b      	beq.n	8000970 <MCAL_GPIO_Init+0x62>
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	2b06      	cmp	r3, #6
 800095e:	d007      	beq.n	8000970 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||
 8000964:	2b05      	cmp	r3, #5
 8000966:	d003      	beq.n	8000970 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	2b04      	cmp	r3, #4
 800096e:	d10e      	bne.n	800098e <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] , Mode[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f );
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	789b      	ldrb	r3, [r3, #2]
 8000974:	3b04      	subs	r3, #4
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	b25a      	sxtb	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	78db      	ldrb	r3, [r3, #3]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b25b      	sxtb	r3, r3
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	e02c      	b.n	80009e8 <MCAL_GPIO_Init+0xda>
	}

	// if pin is Input
	else // MODE = 00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d003      	beq.n	800099e <MCAL_GPIO_Init+0x90>
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	789b      	ldrb	r3, [r3, #2]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d107      	bne.n	80009ae <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] , Mode[1:0]=00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0f );
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	789b      	ldrb	r3, [r3, #2]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e01c      	b.n	80009e8 <MCAL_GPIO_Init+0xda>
		}

		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Consider it as Input Floating
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	2b08      	cmp	r3, #8
 80009b4:	d102      	bne.n	80009bc <MCAL_GPIO_Init+0xae>
		{
			// Set CNF[1:0] , Mode[1:0]=00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0f );
 80009b6:	2304      	movs	r3, #4
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e015      	b.n	80009e8 <MCAL_GPIO_Init+0xda>
		}

		else //PU  PD  Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f );
 80009bc:	2308      	movs	r3, #8
 80009be:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	789b      	ldrb	r3, [r3, #2]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d107      	bne.n	80009d8 <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1  Input Pull-up : table 20, port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;   // (1 << )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	8812      	ldrh	r2, [r2, #0]
 80009d0:	431a      	orrs	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	e007      	b.n	80009e8 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0  Input Pull-down : table 20, port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	8812      	ldrh	r2, [r2, #0]
 80009e0:	43d2      	mvns	r2, r2
 80009e2:	401a      	ands	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	60da      	str	r2, [r3, #12]



	}
	// Write on CRL or CRH
	(*ConfigRegister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80009e8:	7bfc      	ldrb	r4, [r7, #15]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff2a 	bl	8000848 <Get_CRLH_Position>
 80009f4:	4603      	mov	r3, r0
 80009f6:	fa04 f203 	lsl.w	r2, r4, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	431a      	orrs	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}

08000a0c <__libc_init_array>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	2500      	movs	r5, #0
 8000a10:	4e0c      	ldr	r6, [pc, #48]	; (8000a44 <__libc_init_array+0x38>)
 8000a12:	4c0d      	ldr	r4, [pc, #52]	; (8000a48 <__libc_init_array+0x3c>)
 8000a14:	1ba4      	subs	r4, r4, r6
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	42a5      	cmp	r5, r4
 8000a1a:	d109      	bne.n	8000a30 <__libc_init_array+0x24>
 8000a1c:	f000 f81a 	bl	8000a54 <_init>
 8000a20:	2500      	movs	r5, #0
 8000a22:	4e0a      	ldr	r6, [pc, #40]	; (8000a4c <__libc_init_array+0x40>)
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <__libc_init_array+0x44>)
 8000a26:	1ba4      	subs	r4, r4, r6
 8000a28:	10a4      	asrs	r4, r4, #2
 8000a2a:	42a5      	cmp	r5, r4
 8000a2c:	d105      	bne.n	8000a3a <__libc_init_array+0x2e>
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a34:	4798      	blx	r3
 8000a36:	3501      	adds	r5, #1
 8000a38:	e7ee      	b.n	8000a18 <__libc_init_array+0xc>
 8000a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a3e:	4798      	blx	r3
 8000a40:	3501      	adds	r5, #1
 8000a42:	e7f2      	b.n	8000a2a <__libc_init_array+0x1e>
 8000a44:	08000a84 	.word	0x08000a84
 8000a48:	08000a84 	.word	0x08000a84
 8000a4c:	08000a84 	.word	0x08000a84
 8000a50:	08000a88 	.word	0x08000a88

08000a54 <_init>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr

08000a60 <_fini>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr
