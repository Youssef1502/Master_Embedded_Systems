
MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db4  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f6  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000619  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047c  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000779  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002d39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 18 01 	call	0x230	; 0x230 <main>
  8a:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_kick>:
  92:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <LCD_kick+0x4>
  9a:	00 00       	nop
  9c:	c3 98       	cbi	0x18, 3	; 24
  9e:	08 95       	ret

000000a0 <LCD_WRITE_COMMAND>:
  a0:	cf 93       	push	r28
  a2:	c8 2f       	mov	r28, r24
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	9c 2f       	mov	r25, r28
  aa:	90 7f       	andi	r25, 0xF0	; 240
  ac:	89 2b       	or	r24, r25
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	c1 98       	cbi	0x18, 1	; 24
  b2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_WRITE_COMMAND+0x1a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_WRITE_COMMAND+0x20>
  c0:	00 00       	nop
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	28 2f       	mov	r18, r24
  c6:	2f 70       	andi	r18, 0x0F	; 15
  c8:	30 e1       	ldi	r19, 0x10	; 16
  ca:	c3 9f       	mul	r28, r19
  cc:	c0 01       	movw	r24, r0
  ce:	11 24       	eor	r1, r1
  d0:	82 2b       	or	r24, r18
  d2:	8b bb       	out	0x1b, r24	; 27
  d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	9f e1       	ldi	r25, 0x1F	; 31
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_WRITE_COMMAND+0x3c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_WRITE_COMMAND+0x42>
  e2:	00 00       	nop
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <LCD_Init>:
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a bb       	out	0x1a, r24	; 26
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	84 70       	andi	r24, 0x04	; 4
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	8f e5       	ldi	r24, 0x5F	; 95
  f6:	9a ee       	ldi	r25, 0xEA	; 234
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_Init+0x10>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Init+0x16>
  fe:	00 00       	nop
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9f e1       	ldi	r25, 0x1F	; 31
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Init+0x3a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Init+0x40>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <LCD_Clear>:
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9f e1       	ldi	r25, 0x1F	; 31
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Clear+0xa>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_Clear+0x10>
 13c:	00 00       	nop
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 144:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 148:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 14c:	08 95       	ret

0000014e <LCD_WRITE_CHAR>:
 14e:	cf 93       	push	r28
 150:	c8 2f       	mov	r28, r24
 152:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 156:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 15a:	80 31       	cpi	r24, 0x10	; 16
 15c:	91 05       	cpc	r25, r1
 15e:	21 f4       	brne	.+8      	; 0x168 <LCD_WRITE_CHAR+0x1a>
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 166:	0b c0       	rjmp	.+22     	; 0x17e <LCD_WRITE_CHAR+0x30>
 168:	80 97       	sbiw	r24, 0x20	; 32
 16a:	49 f4       	brne	.+18     	; 0x17e <LCD_WRITE_CHAR+0x30>
 16c:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Clear>
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 176:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 17a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	9c 2f       	mov	r25, r28
 184:	90 7f       	andi	r25, 0xF0	; 240
 186:	89 2b       	or	r24, r25
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	c1 9a       	sbi	0x18, 1	; 24
 18c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	8f e1       	ldi	r24, 0x1F	; 31
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_WRITE_CHAR+0x46>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_WRITE_CHAR+0x4c>
 19a:	00 00       	nop
 19c:	8b b3       	in	r24, 0x1b	; 27
 19e:	28 2f       	mov	r18, r24
 1a0:	2f 70       	andi	r18, 0x0F	; 15
 1a2:	30 e1       	ldi	r19, 0x10	; 16
 1a4:	c3 9f       	mul	r28, r19
 1a6:	c0 01       	movw	r24, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	82 2b       	or	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9c e9       	ldi	r25, 0x9C	; 156
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_WRITE_CHAR+0x68>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_WRITE_CHAR+0x6e>
 1bc:	00 00       	nop
 1be:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1c2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 1cc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 1d0:	8f e5       	ldi	r24, 0x5F	; 95
 1d2:	9a ee       	ldi	r25, 0xEA	; 234
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_WRITE_CHAR+0x86>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_WRITE_CHAR+0x8c>
 1da:	00 00       	nop
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <LCD_WRITE_STRING>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <LCD_WRITE_STRING+0x18>
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_WRITE_CHAR>
 1f2:	89 91       	ld	r24, Y+
 1f4:	81 11       	cpse	r24, r1
 1f6:	fb cf       	rjmp	.-10     	; 0x1ee <LCD_WRITE_STRING+0xe>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <LCD_GOTO_XY>:
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	31 f4       	brne	.+12     	; 0x20e <LCD_GOTO_XY+0x10>
 202:	60 31       	cpi	r22, 0x10	; 16
 204:	58 f4       	brcc	.+22     	; 0x21c <LCD_GOTO_XY+0x1e>
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 20c:	08 95       	ret
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	29 f4       	brne	.+10     	; 0x21c <LCD_GOTO_XY+0x1e>
 212:	60 32       	cpi	r22, 0x20	; 32
 214:	18 f4       	brcc	.+6      	; 0x21c <LCD_GOTO_XY+0x1e>
 216:	80 ec       	ldi	r24, 0xC0	; 192
 218:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WRITE_COMMAND>
 21c:	08 95       	ret

0000021e <SPI_Init>:
//#define SLAVE

void SPI_Init(void)
{
	#ifdef MASTER
		SPCR |= (1<<MSTR);
 21e:	6c 9a       	sbi	0x0d, 4	; 13
		SPCR &= ~(1<<CPOL);
 220:	6b 98       	cbi	0x0d, 3	; 13
	
	#ifdef SLAVE
		SPCR &= ~(1<<MSTR);
	#endif
	
	SPCR |= (1<<SPE);   // Enable SPI Peripheral
 222:	6e 9a       	sbi	0x0d, 6	; 13
 224:	08 95       	ret

00000226 <SPI_SendReceive>:
	// speed 2MHz -> SPR1 = 0 , SPR0 = 0 -> SPCR  (Fcpu / 4)
}

uint8_t SPI_SendReceive(uint8_t data)
{
	SPDR = data;
 226:	8f b9       	out	0x0f, r24	; 15
	while(!((SPSR>>SPIF)&1));
 228:	77 9b       	sbis	0x0e, 7	; 14
 22a:	fe cf       	rjmp	.-4      	; 0x228 <SPI_SendReceive+0x2>
	return SPDR;
 22c:	8f b1       	in	r24, 0x0f	; 15
}
 22e:	08 95       	ret

00000230 <main>:


int main(void)
{
	char data = 'A' , receive_data;
	LCD_Init();
 230:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Init>
	SPI_Init();
 234:	0e 94 0f 01 	call	0x21e	; 0x21e <SPI_Init>
	LCD_WRITE_STRING("MASTER");
 238:	80 e6       	ldi	r24, 0x60	; 96
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_WRITE_STRING>
	
    while (1) 
    {
		receive_data = SPI_SendReceive(data);
 240:	81 e4       	ldi	r24, 0x41	; 65
 242:	0e 94 13 01 	call	0x226	; 0x226 <SPI_SendReceive>
 246:	d8 2f       	mov	r29, r24
		data++;
 248:	c2 e4       	ldi	r28, 0x42	; 66
 24a:	01 c0       	rjmp	.+2      	; 0x24e <main+0x1e>
		if(data == 'z'+1)
		{
			data = 'A';
 24c:	c1 e4       	ldi	r28, 0x41	; 65
		}
		LCD_GOTO_XY(2,0);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_GOTO_XY>
		LCD_WRITE_CHAR(receive_data);
 256:	8d 2f       	mov	r24, r29
 258:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_WRITE_CHAR>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	82 e5       	ldi	r24, 0x52	; 82
 260:	97 e0       	ldi	r25, 0x07	; 7
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x32>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x3c>
 26c:	00 00       	nop
	SPI_Init();
	LCD_WRITE_STRING("MASTER");
	
    while (1) 
    {
		receive_data = SPI_SendReceive(data);
 26e:	8c 2f       	mov	r24, r28
 270:	0e 94 13 01 	call	0x226	; 0x226 <SPI_SendReceive>
 274:	d8 2f       	mov	r29, r24
		data++;
 276:	cf 5f       	subi	r28, 0xFF	; 255
		if(data == 'z'+1)
 278:	cb 37       	cpi	r28, 0x7B	; 123
 27a:	49 f7       	brne	.-46     	; 0x24e <main+0x1e>
 27c:	e7 cf       	rjmp	.-50     	; 0x24c <main+0x1c>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
