
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b51  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00000eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037a  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000341  00000000  00000000  00002057  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_10>
  2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 00 	call	0x84	; 0x84 <main>
  74:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TOIE_Callback>:

extern uint8_t u8_TOVNumber;

void TOIE_Callback()
{
	PORTA = ~PORTA;
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	80 95       	com	r24
  80:	8b bb       	out	0x1b, r24	; 27
  82:	08 95       	ret

00000084 <main>:
}

int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x6>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0x8>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
	sei();
  94:	78 94       	sei
	TIMER0_CALLBACK_CompareMatch_INTERRUPT(TOIE_Callback);
  96:	8e e3       	ldi	r24, 0x3E	; 62
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 95 00 	call	0x12a	; 0x12a <TIMER0_CALLBACK_CompareMatch_INTERRUPT>
	Timer0_Config_t config = {CTC, OCIE_ENABLE, TOIE_DISABLE, PRESCALING_CLK8};
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	8a 83       	std	Y+2, r24	; 0x02
  a6:	1b 82       	std	Y+3, r1	; 0x03
  a8:	8c 83       	std	Y+4, r24	; 0x04
	TIMER0_SetCompareValue(0xF0);
  aa:	80 ef       	ldi	r24, 0xF0	; 240
  ac:	0e 94 92 00 	call	0x124	; 0x124 <TIMER0_SetCompareValue>
    TIMER0_Init(&config);
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 5d 00 	call	0xba	; 0xba <TIMER0_Init>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x34>

000000ba <TIMER0_Init>:
	CALLBACK_CM = callback;
}

void TIMER0_CALLBACK_Overflow_INTERRUPT(PTR_VoidFuncVoid_t callback)
{
	CALLBACK_OVF = callback;
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	79 f1       	breq	.+94     	; 0x11c <TIMER0_Init+0x62>
  be:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <TIMER0_Configurations+0x1>
  c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <TIMER0_Configurations>
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	11 f0       	breq	.+4      	; 0xd2 <TIMER0_Init+0x18>
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	19 f4       	brne	.+6      	; 0xd8 <TIMER0_Init+0x1e>
  d2:	93 b7       	in	r25, 0x33	; 51
  d4:	89 2b       	or	r24, r25
  d6:	83 bf       	out	0x33, r24	; 51
  d8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TIMER0_Configurations>
  dc:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TIMER0_Configurations+0x1>
  e0:	83 81       	ldd	r24, Z+3	; 0x03
  e2:	88 30       	cpi	r24, 0x08	; 8
  e4:	18 f4       	brcc	.+6      	; 0xec <TIMER0_Init+0x32>
  e6:	93 b7       	in	r25, 0x33	; 51
  e8:	89 2b       	or	r24, r25
  ea:	83 bf       	out	0x33, r24	; 51
  ec:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TIMER0_Configurations>
  f0:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TIMER0_Configurations+0x1>
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	88 23       	and	r24, r24
  f8:	11 f0       	breq	.+4      	; 0xfe <TIMER0_Init+0x44>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	19 f4       	brne	.+6      	; 0x104 <TIMER0_Init+0x4a>
  fe:	99 b7       	in	r25, 0x39	; 57
 100:	89 2b       	or	r24, r25
 102:	89 bf       	out	0x39, r24	; 57
 104:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TIMER0_Configurations>
 108:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TIMER0_Configurations+0x1>
 10c:	82 81       	ldd	r24, Z+2	; 0x02
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	38 f4       	brcc	.+14     	; 0x120 <TIMER0_Init+0x66>
 112:	99 b7       	in	r25, 0x39	; 57
 114:	89 2b       	or	r24, r25
 116:	89 bf       	out	0x39, r24	; 57
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	08 95       	ret

00000124 <TIMER0_SetCompareValue>:
 124:	8c bf       	out	0x3c, r24	; 60
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret

0000012a <TIMER0_CALLBACK_CompareMatch_INTERRUPT>:
 12a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 12e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 132:	08 95       	ret

00000134 <__vector_10>:
}

ISR(TIMER0_COMP_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	CALLBACK_CM();
 156:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 15a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 15e:	09 95       	icall
}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	TOV_Number++;
 1a4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TOV_Number>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TOV_Number>
	CALLBACK_OVF();
 1ae:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <CALLBACK_OVF>
 1b2:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <CALLBACK_OVF+0x1>
 1b6:	09 95       	icall
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
