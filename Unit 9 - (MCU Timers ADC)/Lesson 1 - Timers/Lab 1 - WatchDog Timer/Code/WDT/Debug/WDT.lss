
WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a3  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059d  00000000  00000000  00000867  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a3  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <WDT_Enable>:

void WDT_Enable()
{
	// Watchdog Timer Prescale Select
	// 1 1 0 [ 1.0 sec ]
	WDTCR = (1 << WDP1) | (1 << WDP2) | (1 << WDE);
  6c:	8e e0       	ldi	r24, 0x0E	; 14
  6e:	81 bd       	out	0x21, r24	; 33
	RESET_BIT(WDTCR , WDP0);
  70:	81 b5       	in	r24, 0x21	; 33
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	81 bd       	out	0x21, r24	; 33
  76:	08 95       	ret

00000078 <WDT_Disable>:
	// To disable an enabled Watchdog Timer, the following procedure must be followed:
	// 1. In the same operation, write a logic one to WDTOE and WDE. A logic one must be written to WDE
	// even though it is set to one before the disable operation starts.
	// 2. Within the next four clock cycles, write a logic 0 to WDE. This disables the Watchdog
	
	WDTCR = (1<<WDTOE)|(1<<WDE);
  78:	88 e1       	ldi	r24, 0x18	; 24
  7a:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;
  7c:	11 bc       	out	0x21, r1	; 33
  7e:	08 95       	ret

00000080 <main>:
}

int main(void)
{
	// Make Led pin as Output
	SET_BIT(LED_DDR , LED_Pin);
  80:	84 b3       	in	r24, 0x14	; 20
  82:	81 60       	ori	r24, 0x01	; 1
  84:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	84 e3       	ldi	r24, 0x34	; 52
  8a:	9c e0       	ldi	r25, 0x0C	; 12
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x16>
  96:	00 00       	nop
	_delay_ms(500);
    
	while (1) 
    {
		WDT_Enable();
  98:	0e 94 36 00 	call	0x6c	; 0x6c <WDT_Enable>
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	84 e3       	ldi	r24, 0x34	; 52
  a0:	9c e0       	ldi	r25, 0x0C	; 12
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
		_delay_ms(500);
		TOG_BIT(LED_PORT, LED_Pin);
  ae:	95 b3       	in	r25, 0x15	; 21
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	89 27       	eor	r24, r25
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	88 ef       	ldi	r24, 0xF8	; 248
  ba:	95 e1       	ldi	r25, 0x15	; 21
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
		_delay_ms(900);
		WDT_Disable();
  c8:	0e 94 3c 00 	call	0x78	; 0x78 <WDT_Disable>
  cc:	e5 cf       	rjmp	.-54     	; 0x98 <main+0x18>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
